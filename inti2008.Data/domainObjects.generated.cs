#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8922
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace inti2008.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="inti2008")]
	public partial class IntiDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertExt_ChangeLog(Ext_ChangeLog instance);
    partial void UpdateExt_ChangeLog(Ext_ChangeLog instance);
    partial void DeleteExt_ChangeLog(Ext_ChangeLog instance);
    partial void InsertExt_Forum(Ext_Forum instance);
    partial void UpdateExt_Forum(Ext_Forum instance);
    partial void DeleteExt_Forum(Ext_Forum instance);
    partial void InsertExt_ForumCategory(Ext_ForumCategory instance);
    partial void UpdateExt_ForumCategory(Ext_ForumCategory instance);
    partial void DeleteExt_ForumCategory(Ext_ForumCategory instance);
    partial void InsertExt_Message(Ext_Message instance);
    partial void UpdateExt_Message(Ext_Message instance);
    partial void DeleteExt_Message(Ext_Message instance);
    partial void InsertExt_MessageRecipient(Ext_MessageRecipient instance);
    partial void UpdateExt_MessageRecipient(Ext_MessageRecipient instance);
    partial void DeleteExt_MessageRecipient(Ext_MessageRecipient instance);
    partial void InsertExt_News(Ext_News instance);
    partial void UpdateExt_News(Ext_News instance);
    partial void DeleteExt_News(Ext_News instance);
    partial void InsertExt_PrivateTournament(Ext_PrivateTournament instance);
    partial void UpdateExt_PrivateTournament(Ext_PrivateTournament instance);
    partial void DeleteExt_PrivateTournament(Ext_PrivateTournament instance);
    partial void InsertExt_PrivateTournamentParticipant(Ext_PrivateTournamentParticipant instance);
    partial void UpdateExt_PrivateTournamentParticipant(Ext_PrivateTournamentParticipant instance);
    partial void DeleteExt_PrivateTournamentParticipant(Ext_PrivateTournamentParticipant instance);
    partial void InsertExt_UserFavoriteTeam(Ext_UserFavoriteTeam instance);
    partial void UpdateExt_UserFavoriteTeam(Ext_UserFavoriteTeam instance);
    partial void DeleteExt_UserFavoriteTeam(Ext_UserFavoriteTeam instance);
    partial void InsertInti_Athlete(Inti_Athlete instance);
    partial void UpdateInti_Athlete(Inti_Athlete instance);
    partial void DeleteInti_Athlete(Inti_Athlete instance);
    partial void InsertInti_AthleteClub(Inti_AthleteClub instance);
    partial void UpdateInti_AthleteClub(Inti_AthleteClub instance);
    partial void DeleteInti_AthleteClub(Inti_AthleteClub instance);
    partial void InsertInti_Club(Inti_Club instance);
    partial void UpdateInti_Club(Inti_Club instance);
    partial void DeleteInti_Club(Inti_Club instance);
    partial void InsertInti_Match(Inti_Match instance);
    partial void UpdateInti_Match(Inti_Match instance);
    partial void DeleteInti_Match(Inti_Match instance);
    partial void InsertInti_MatchPointEvent(Inti_MatchPointEvent instance);
    partial void UpdateInti_MatchPointEvent(Inti_MatchPointEvent instance);
    partial void DeleteInti_MatchPointEvent(Inti_MatchPointEvent instance);
    partial void InsertInti_PointEvent(Inti_PointEvent instance);
    partial void UpdateInti_PointEvent(Inti_PointEvent instance);
    partial void DeleteInti_PointEvent(Inti_PointEvent instance);
    partial void InsertInti_PointEventPosition(Inti_PointEventPosition instance);
    partial void UpdateInti_PointEventPosition(Inti_PointEventPosition instance);
    partial void DeleteInti_PointEventPosition(Inti_PointEventPosition instance);
    partial void InsertInti_Position(Inti_Position instance);
    partial void UpdateInti_Position(Inti_Position instance);
    partial void DeleteInti_Position(Inti_Position instance);
    partial void InsertInti_Team(Inti_Team instance);
    partial void UpdateInti_Team(Inti_Team instance);
    partial void DeleteInti_Team(Inti_Team instance);
    partial void InsertInti_TeamAthlete(Inti_TeamAthlete instance);
    partial void UpdateInti_TeamAthlete(Inti_TeamAthlete instance);
    partial void DeleteInti_TeamAthlete(Inti_TeamAthlete instance);
    partial void InsertInti_TeamTransfer(Inti_TeamTransfer instance);
    partial void UpdateInti_TeamTransfer(Inti_TeamTransfer instance);
    partial void DeleteInti_TeamTransfer(Inti_TeamTransfer instance);
    partial void InsertInti_TeamVersion(Inti_TeamVersion instance);
    partial void UpdateInti_TeamVersion(Inti_TeamVersion instance);
    partial void DeleteInti_TeamVersion(Inti_TeamVersion instance);
    partial void InsertInti_TeamPointEvents(Inti_TeamPointEvents instance);
    partial void UpdateInti_TeamPointEvents(Inti_TeamPointEvents instance);
    partial void DeleteInti_TeamPointEvents(Inti_TeamPointEvents instance);
    partial void InsertInti_Tournament(Inti_Tournament instance);
    partial void UpdateInti_Tournament(Inti_Tournament instance);
    partial void DeleteInti_Tournament(Inti_Tournament instance);
    partial void InsertInti_TournamentRule(Inti_TournamentRule instance);
    partial void UpdateInti_TournamentRule(Inti_TournamentRule instance);
    partial void DeleteInti_TournamentRule(Inti_TournamentRule instance);
    partial void InsertInti_TransferPeriod(Inti_TransferPeriod instance);
    partial void UpdateInti_TransferPeriod(Inti_TransferPeriod instance);
    partial void DeleteInti_TransferPeriod(Inti_TransferPeriod instance);
    partial void InsertSys_Parameter(Sys_Parameter instance);
    partial void UpdateSys_Parameter(Sys_Parameter instance);
    partial void DeleteSys_Parameter(Sys_Parameter instance);
    partial void InsertSys_Permission(Sys_Permission instance);
    partial void UpdateSys_Permission(Sys_Permission instance);
    partial void DeleteSys_Permission(Sys_Permission instance);
    partial void InsertSys_User(Sys_User instance);
    partial void UpdateSys_User(Sys_User instance);
    partial void DeleteSys_User(Sys_User instance);
    partial void InsertSys_UserPermission(Sys_UserPermission instance);
    partial void UpdateSys_UserPermission(Sys_UserPermission instance);
    partial void DeleteSys_UserPermission(Sys_UserPermission instance);
    #endregion
		
		public IntiDataContext() : 
				base("Data source=database.onricoh.se;Initial catalog=interntipset;User Id=inti;Passwor" +
						"d=brollan1", mappingSource)
		{
			OnCreated();
		}
		
		public IntiDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IntiDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IntiDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IntiDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Ext_ChangeLog> Ext_ChangeLog
		{
			get
			{
				return this.GetTable<Ext_ChangeLog>();
			}
		}
		
		public System.Data.Linq.Table<Ext_Forum> Ext_Forum
		{
			get
			{
				return this.GetTable<Ext_Forum>();
			}
		}
		
		public System.Data.Linq.Table<Ext_ForumCategory> Ext_ForumCategory
		{
			get
			{
				return this.GetTable<Ext_ForumCategory>();
			}
		}
		
		public System.Data.Linq.Table<Ext_Message> Ext_Message
		{
			get
			{
				return this.GetTable<Ext_Message>();
			}
		}
		
		public System.Data.Linq.Table<Ext_MessageRecipient> Ext_MessageRecipient
		{
			get
			{
				return this.GetTable<Ext_MessageRecipient>();
			}
		}
		
		public System.Data.Linq.Table<Ext_News> Ext_News
		{
			get
			{
				return this.GetTable<Ext_News>();
			}
		}
		
		public System.Data.Linq.Table<Ext_PrivateTournament> Ext_PrivateTournament
		{
			get
			{
				return this.GetTable<Ext_PrivateTournament>();
			}
		}
		
		public System.Data.Linq.Table<Ext_PrivateTournamentParticipant> Ext_PrivateTournamentParticipant
		{
			get
			{
				return this.GetTable<Ext_PrivateTournamentParticipant>();
			}
		}
		
		public System.Data.Linq.Table<Ext_UserFavoriteTeam> Ext_UserFavoriteTeam
		{
			get
			{
				return this.GetTable<Ext_UserFavoriteTeam>();
			}
		}
		
		public System.Data.Linq.Table<Inti_Athlete> Inti_Athlete
		{
			get
			{
				return this.GetTable<Inti_Athlete>();
			}
		}
		
		public System.Data.Linq.Table<Inti_AthleteClub> Inti_AthleteClub
		{
			get
			{
				return this.GetTable<Inti_AthleteClub>();
			}
		}
		
		public System.Data.Linq.Table<Inti_Club> Inti_Club
		{
			get
			{
				return this.GetTable<Inti_Club>();
			}
		}
		
		public System.Data.Linq.Table<Inti_Match> Inti_Match
		{
			get
			{
				return this.GetTable<Inti_Match>();
			}
		}
		
		public System.Data.Linq.Table<Inti_MatchPointEvent> Inti_MatchPointEvent
		{
			get
			{
				return this.GetTable<Inti_MatchPointEvent>();
			}
		}
		
		public System.Data.Linq.Table<Inti_PointEvent> Inti_PointEvent
		{
			get
			{
				return this.GetTable<Inti_PointEvent>();
			}
		}
		
		public System.Data.Linq.Table<Inti_PointEventPosition> Inti_PointEventPosition
		{
			get
			{
				return this.GetTable<Inti_PointEventPosition>();
			}
		}
		
		public System.Data.Linq.Table<Inti_Position> Inti_Position
		{
			get
			{
				return this.GetTable<Inti_Position>();
			}
		}
		
		public System.Data.Linq.Table<Inti_Team> Inti_Team
		{
			get
			{
				return this.GetTable<Inti_Team>();
			}
		}
		
		public System.Data.Linq.Table<Inti_TeamAthlete> Inti_TeamAthlete
		{
			get
			{
				return this.GetTable<Inti_TeamAthlete>();
			}
		}
		
		public System.Data.Linq.Table<Inti_TeamTransfer> Inti_TeamTransfer
		{
			get
			{
				return this.GetTable<Inti_TeamTransfer>();
			}
		}
		
		public System.Data.Linq.Table<Inti_TeamVersion> Inti_TeamVersion
		{
			get
			{
				return this.GetTable<Inti_TeamVersion>();
			}
		}
		
		public System.Data.Linq.Table<Inti_TeamPointEvents> Inti_TeamPointEvents
		{
			get
			{
				return this.GetTable<Inti_TeamPointEvents>();
			}
		}
		
		public System.Data.Linq.Table<Inti_Tournament> Inti_Tournament
		{
			get
			{
				return this.GetTable<Inti_Tournament>();
			}
		}
		
		public System.Data.Linq.Table<Inti_TournamentRule> Inti_TournamentRule
		{
			get
			{
				return this.GetTable<Inti_TournamentRule>();
			}
		}
		
		public System.Data.Linq.Table<Inti_TransferPeriod> Inti_TransferPeriod
		{
			get
			{
				return this.GetTable<Inti_TransferPeriod>();
			}
		}
		
		public System.Data.Linq.Table<Sys_Parameter> Sys_Parameter
		{
			get
			{
				return this.GetTable<Sys_Parameter>();
			}
		}
		
		public System.Data.Linq.Table<Sys_Permission> Sys_Permission
		{
			get
			{
				return this.GetTable<Sys_Permission>();
			}
		}
		
		public System.Data.Linq.Table<Sys_User> Sys_User
		{
			get
			{
				return this.GetTable<Sys_User>();
			}
		}
		
		public System.Data.Linq.Table<Sys_UserPermission> Sys_UserPermission
		{
			get
			{
				return this.GetTable<Sys_UserPermission>();
			}
		}
	}
	
	[Table(Name="dbo.ext_ChangeLog")]
	public partial class Ext_ChangeLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Nullable<System.Guid> _ObjectGUID;
		
		private string _ObjectType;
		
		private System.Guid _UserGUID;
		
		private string _Client;
		
		private System.DateTime _LogDate;
		
		private string _Action;
		
		private string _Message;
		
		private EntityRef<Sys_User> _Sys_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnObjectGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnObjectGUIDChanged();
    partial void OnObjectTypeChanging(string value);
    partial void OnObjectTypeChanged();
    partial void OnUserGUIDChanging(System.Guid value);
    partial void OnUserGUIDChanged();
    partial void OnClientChanging(string value);
    partial void OnClientChanged();
    partial void OnLogDateChanging(System.DateTime value);
    partial void OnLogDateChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
		
		public Ext_ChangeLog()
		{
			this._Sys_User = default(EntityRef<Sys_User>);
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectGUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ObjectGUID
		{
			get
			{
				return this._ObjectGUID;
			}
			set
			{
				if ((this._ObjectGUID != value))
				{
					this.OnObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectGUID = value;
					this.SendPropertyChanged("ObjectGUID");
					this.OnObjectGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectType", DbType="VarChar(255)")]
		public string ObjectType
		{
			get
			{
				return this._ObjectType;
			}
			set
			{
				if ((this._ObjectType != value))
				{
					this.OnObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ObjectType = value;
					this.SendPropertyChanged("ObjectType");
					this.OnObjectTypeChanged();
				}
			}
		}
		
		[Column(Storage="_UserGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserGUID
		{
			get
			{
				return this._UserGUID;
			}
			set
			{
				if ((this._UserGUID != value))
				{
					if (this._Sys_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserGUIDChanging(value);
					this.SendPropertyChanging();
					this._UserGUID = value;
					this.SendPropertyChanged("UserGUID");
					this.OnUserGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Client", DbType="VarChar(50)")]
		public string Client
		{
			get
			{
				return this._Client;
			}
			set
			{
				if ((this._Client != value))
				{
					this.OnClientChanging(value);
					this.SendPropertyChanging();
					this._Client = value;
					this.SendPropertyChanged("Client");
					this.OnClientChanged();
				}
			}
		}
		
		[Column(Storage="_LogDate", DbType="DateTime")]
		public System.DateTime LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[Column(Storage="_Action", DbType="VarChar(15)")]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="VarChar(1024)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Association(Name="FK_ext_Forum_User", Storage="_Sys_User", ThisKey="UserGUID", OtherKey="GUID", IsForeignKey=true)]
		public Sys_User Sys_User
		{
			get
			{
				return this._Sys_User.Entity;
			}
			set
			{
				if ((this._Sys_User.Entity != value))
				{
					this.SendPropertyChanging();
					this._Sys_User.Entity = value;
					this.SendPropertyChanged("Sys_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ext_Forum")]
	public partial class Ext_Forum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _ForumCategoryGUID;
		
		private System.Nullable<System.Guid> _ResponseToGUID;
		
		private System.Guid _UserGUID;
		
		private string _Header;
		
		private string _Body;
		
		private System.Nullable<System.DateTime> _PostedDate;
		
		private EntityRef<Ext_ForumCategory> _Ext_ForumCategory;
		
		private EntityRef<Sys_User> _Sys_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnForumCategoryGUIDChanging(System.Guid value);
    partial void OnForumCategoryGUIDChanged();
    partial void OnResponseToGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnResponseToGUIDChanged();
    partial void OnUserGUIDChanging(System.Guid value);
    partial void OnUserGUIDChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnPostedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPostedDateChanged();
    #endregion
		
		public Ext_Forum()
		{
			this._Ext_ForumCategory = default(EntityRef<Ext_ForumCategory>);
			this._Sys_User = default(EntityRef<Sys_User>);
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ForumCategoryGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ForumCategoryGUID
		{
			get
			{
				return this._ForumCategoryGUID;
			}
			set
			{
				if ((this._ForumCategoryGUID != value))
				{
					if (this._Ext_ForumCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumCategoryGUIDChanging(value);
					this.SendPropertyChanging();
					this._ForumCategoryGUID = value;
					this.SendPropertyChanged("ForumCategoryGUID");
					this.OnForumCategoryGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ResponseToGUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ResponseToGUID
		{
			get
			{
				return this._ResponseToGUID;
			}
			set
			{
				if ((this._ResponseToGUID != value))
				{
					this.OnResponseToGUIDChanging(value);
					this.SendPropertyChanging();
					this._ResponseToGUID = value;
					this.SendPropertyChanged("ResponseToGUID");
					this.OnResponseToGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserGUID
		{
			get
			{
				return this._UserGUID;
			}
			set
			{
				if ((this._UserGUID != value))
				{
					if (this._Sys_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserGUIDChanging(value);
					this.SendPropertyChanging();
					this._UserGUID = value;
					this.SendPropertyChanged("UserGUID");
					this.OnUserGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Header", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="VarChar(4048)")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_PostedDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> PostedDate
		{
			get
			{
				return this._PostedDate;
			}
			set
			{
				if ((this._PostedDate != value))
				{
					this.OnPostedDateChanging(value);
					this.SendPropertyChanging();
					this._PostedDate = value;
					this.SendPropertyChanged("PostedDate");
					this.OnPostedDateChanged();
				}
			}
		}
		
		[Association(Name="FK_ext_Forum_ForumCategory", Storage="_Ext_ForumCategory", ThisKey="ForumCategoryGUID", OtherKey="GUID", IsForeignKey=true)]
		public Ext_ForumCategory Ext_ForumCategory
		{
			get
			{
				return this._Ext_ForumCategory.Entity;
			}
			set
			{
				Ext_ForumCategory previousValue = this._Ext_ForumCategory.Entity;
				if (((previousValue != value) 
							|| (this._Ext_ForumCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ext_ForumCategory.Entity = null;
						previousValue.Ext_Forum.Remove(this);
					}
					this._Ext_ForumCategory.Entity = value;
					if ((value != null))
					{
						value.Ext_Forum.Add(this);
						this._ForumCategoryGUID = value.GUID;
					}
					else
					{
						this._ForumCategoryGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Ext_ForumCategory");
				}
			}
		}
		
		[Association(Name="FK_ext_Forum_User", Storage="_Sys_User", ThisKey="UserGUID", OtherKey="GUID", IsForeignKey=true)]
		public Sys_User Sys_User
		{
			get
			{
				return this._Sys_User.Entity;
			}
			set
			{
				Sys_User previousValue = this._Sys_User.Entity;
				if (((previousValue != value) 
							|| (this._Sys_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sys_User.Entity = null;
						previousValue.Ext_Forum.Remove(this);
					}
					this._Sys_User.Entity = value;
					if ((value != null))
					{
						value.Ext_Forum.Add(this);
						this._UserGUID = value.GUID;
					}
					else
					{
						this._UserGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Sys_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ext_ForumCategory")]
	public partial class Ext_ForumCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Nullable<System.Guid> _TournamentGUID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Ext_Forum> _Ext_Forum;
		
		private EntityRef<Inti_Tournament> _Inti_Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnTournamentGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnTournamentGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Ext_ForumCategory()
		{
			this._Ext_Forum = new EntitySet<Ext_Forum>(new Action<Ext_Forum>(this.attach_Ext_Forum), new Action<Ext_Forum>(this.detach_Ext_Forum));
			this._Inti_Tournament = default(EntityRef<Inti_Tournament>);
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TournamentGUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TournamentGUID
		{
			get
			{
				return this._TournamentGUID;
			}
			set
			{
				if ((this._TournamentGUID != value))
				{
					if (this._Inti_Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentGUIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentGUID = value;
					this.SendPropertyChanged("TournamentGUID");
					this.OnTournamentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(1024)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="FK_ext_Forum_ForumCategory", Storage="_Ext_Forum", ThisKey="GUID", OtherKey="ForumCategoryGUID", DeleteRule="NO ACTION")]
		public EntitySet<Ext_Forum> Ext_Forum
		{
			get
			{
				return this._Ext_Forum;
			}
			set
			{
				this._Ext_Forum.Assign(value);
			}
		}
		
		[Association(Name="FK_ext_ForumCategory_Tournament", Storage="_Inti_Tournament", ThisKey="TournamentGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Tournament Inti_Tournament
		{
			get
			{
				return this._Inti_Tournament.Entity;
			}
			set
			{
				Inti_Tournament previousValue = this._Inti_Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Tournament.Entity = null;
						previousValue.Ext_ForumCategory.Remove(this);
					}
					this._Inti_Tournament.Entity = value;
					if ((value != null))
					{
						value.Ext_ForumCategory.Add(this);
						this._TournamentGUID = value.GUID;
					}
					else
					{
						this._TournamentGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Inti_Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ext_Forum(Ext_Forum entity)
		{
			this.SendPropertyChanging();
			entity.Ext_ForumCategory = this;
		}
		
		private void detach_Ext_Forum(Ext_Forum entity)
		{
			this.SendPropertyChanging();
			entity.Ext_ForumCategory = null;
		}
	}
	
	[Table(Name="dbo.ext_Message")]
	public partial class Ext_Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _FromUserGUID;
		
		private string _Header;
		
		private string _Body;
		
		private System.Nullable<System.DateTime> _SentDate;
		
		private EntityRef<Sys_User> _Sys_User;
		
		private EntitySet<Ext_MessageRecipient> _Ext_MessageRecipient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnFromUserGUIDChanging(System.Guid value);
    partial void OnFromUserGUIDChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnSentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSentDateChanged();
    #endregion
		
		public Ext_Message()
		{
			this._Sys_User = default(EntityRef<Sys_User>);
			this._Ext_MessageRecipient = new EntitySet<Ext_MessageRecipient>(new Action<Ext_MessageRecipient>(this.attach_Ext_MessageRecipient), new Action<Ext_MessageRecipient>(this.detach_Ext_MessageRecipient));
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_FromUserGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FromUserGUID
		{
			get
			{
				return this._FromUserGUID;
			}
			set
			{
				if ((this._FromUserGUID != value))
				{
					if (this._Sys_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromUserGUIDChanging(value);
					this.SendPropertyChanging();
					this._FromUserGUID = value;
					this.SendPropertyChanged("FromUserGUID");
					this.OnFromUserGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Header", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="VarChar(4048)")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_SentDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> SentDate
		{
			get
			{
				return this._SentDate;
			}
			set
			{
				if ((this._SentDate != value))
				{
					this.OnSentDateChanging(value);
					this.SendPropertyChanging();
					this._SentDate = value;
					this.SendPropertyChanged("SentDate");
					this.OnSentDateChanged();
				}
			}
		}
		
		[Association(Name="FK_ext_Message_User", Storage="_Sys_User", ThisKey="FromUserGUID", OtherKey="GUID", IsForeignKey=true)]
		public Sys_User Sys_User
		{
			get
			{
				return this._Sys_User.Entity;
			}
			set
			{
				Sys_User previousValue = this._Sys_User.Entity;
				if (((previousValue != value) 
							|| (this._Sys_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sys_User.Entity = null;
						previousValue.Ext_Message.Remove(this);
					}
					this._Sys_User.Entity = value;
					if ((value != null))
					{
						value.Ext_Message.Add(this);
						this._FromUserGUID = value.GUID;
					}
					else
					{
						this._FromUserGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Sys_User");
				}
			}
		}
		
		[Association(Name="FK_ext_MessageRecipient_Message", Storage="_Ext_MessageRecipient", ThisKey="GUID", OtherKey="MessageGUID", DeleteRule="NO ACTION")]
		public EntitySet<Ext_MessageRecipient> Ext_MessageRecipient
		{
			get
			{
				return this._Ext_MessageRecipient;
			}
			set
			{
				this._Ext_MessageRecipient.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ext_MessageRecipient(Ext_MessageRecipient entity)
		{
			this.SendPropertyChanging();
			entity.Ext_Message = this;
		}
		
		private void detach_Ext_MessageRecipient(Ext_MessageRecipient entity)
		{
			this.SendPropertyChanging();
			entity.Ext_Message = null;
		}
	}
	
	[Table(Name="dbo.ext_MessageRecipient")]
	public partial class Ext_MessageRecipient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MessageGUID;
		
		private System.Guid _RecipientUserGUID;
		
		private System.Nullable<System.DateTime> _ReadOn;
		
		private EntityRef<Ext_Message> _Ext_Message;
		
		private EntityRef<Sys_User> _Sys_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageGUIDChanging(System.Guid value);
    partial void OnMessageGUIDChanged();
    partial void OnRecipientUserGUIDChanging(System.Guid value);
    partial void OnRecipientUserGUIDChanged();
    partial void OnReadOnChanging(System.Nullable<System.DateTime> value);
    partial void OnReadOnChanged();
    #endregion
		
		public Ext_MessageRecipient()
		{
			this._Ext_Message = default(EntityRef<Ext_Message>);
			this._Sys_User = default(EntityRef<Sys_User>);
			OnCreated();
		}
		
		[Column(Storage="_MessageGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MessageGUID
		{
			get
			{
				return this._MessageGUID;
			}
			set
			{
				if ((this._MessageGUID != value))
				{
					if (this._Ext_Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageGUIDChanging(value);
					this.SendPropertyChanging();
					this._MessageGUID = value;
					this.SendPropertyChanged("MessageGUID");
					this.OnMessageGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_RecipientUserGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RecipientUserGUID
		{
			get
			{
				return this._RecipientUserGUID;
			}
			set
			{
				if ((this._RecipientUserGUID != value))
				{
					if (this._Sys_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipientUserGUIDChanging(value);
					this.SendPropertyChanging();
					this._RecipientUserGUID = value;
					this.SendPropertyChanged("RecipientUserGUID");
					this.OnRecipientUserGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReadOn", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ReadOn
		{
			get
			{
				return this._ReadOn;
			}
			set
			{
				if ((this._ReadOn != value))
				{
					this.OnReadOnChanging(value);
					this.SendPropertyChanging();
					this._ReadOn = value;
					this.SendPropertyChanged("ReadOn");
					this.OnReadOnChanged();
				}
			}
		}
		
		[Association(Name="FK_ext_MessageRecipient_Message", Storage="_Ext_Message", ThisKey="MessageGUID", OtherKey="GUID", IsForeignKey=true)]
		public Ext_Message Ext_Message
		{
			get
			{
				return this._Ext_Message.Entity;
			}
			set
			{
				Ext_Message previousValue = this._Ext_Message.Entity;
				if (((previousValue != value) 
							|| (this._Ext_Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ext_Message.Entity = null;
						previousValue.Ext_MessageRecipient.Remove(this);
					}
					this._Ext_Message.Entity = value;
					if ((value != null))
					{
						value.Ext_MessageRecipient.Add(this);
						this._MessageGUID = value.GUID;
					}
					else
					{
						this._MessageGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Ext_Message");
				}
			}
		}
		
		[Association(Name="FK_ext_MessageRecipient_User", Storage="_Sys_User", ThisKey="RecipientUserGUID", OtherKey="GUID", IsForeignKey=true)]
		public Sys_User Sys_User
		{
			get
			{
				return this._Sys_User.Entity;
			}
			set
			{
				Sys_User previousValue = this._Sys_User.Entity;
				if (((previousValue != value) 
							|| (this._Sys_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sys_User.Entity = null;
						previousValue.Ext_MessageRecipient.Remove(this);
					}
					this._Sys_User.Entity = value;
					if ((value != null))
					{
						value.Ext_MessageRecipient.Add(this);
						this._RecipientUserGUID = value.GUID;
					}
					else
					{
						this._RecipientUserGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Sys_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ext_News")]
	public partial class Ext_News : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Nullable<System.DateTime> _ValidFrom;
		
		private System.Nullable<System.DateTime> _ValidTo;
		
		private string _Header;
		
		private string _Picture;
		
		private string _Body;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnValidFromChanging(System.Nullable<System.DateTime> value);
    partial void OnValidFromChanged();
    partial void OnValidToChanging(System.Nullable<System.DateTime> value);
    partial void OnValidToChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    #endregion
		
		public Ext_News()
		{
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ValidFrom", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ValidFrom
		{
			get
			{
				return this._ValidFrom;
			}
			set
			{
				if ((this._ValidFrom != value))
				{
					this.OnValidFromChanging(value);
					this.SendPropertyChanging();
					this._ValidFrom = value;
					this.SendPropertyChanged("ValidFrom");
					this.OnValidFromChanged();
				}
			}
		}
		
		[Column(Storage="_ValidTo", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ValidTo
		{
			get
			{
				return this._ValidTo;
			}
			set
			{
				if ((this._ValidTo != value))
				{
					this.OnValidToChanging(value);
					this.SendPropertyChanging();
					this._ValidTo = value;
					this.SendPropertyChanged("ValidTo");
					this.OnValidToChanged();
				}
			}
		}
		
		[Column(Storage="_Header", DbType="VarChar(100)")]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[Column(Storage="_Picture", DbType="VarChar(255)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="VarChar(4048)")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ext_PrivateTournament")]
	public partial class Ext_PrivateTournament : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _TournamentGUID;
		
		private System.Guid _UserGUID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<bool> _IsLimitedInTime;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<int> _StartDay;
		
		private System.Nullable<int> _EndDay;
		
		private System.Nullable<bool> _IsVisibleForAll;
		
		private System.Nullable<bool> _IsOpenForAll;
		
		private EntityRef<Inti_Tournament> _Inti_Tournament;
		
		private EntityRef<Sys_User> _Sys_User;
		
		private EntitySet<Ext_PrivateTournamentParticipant> _Ext_PrivateTournamentParticipant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnTournamentGUIDChanging(System.Guid value);
    partial void OnTournamentGUIDChanged();
    partial void OnUserGUIDChanging(System.Guid value);
    partial void OnUserGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsLimitedInTimeChanging(System.Nullable<bool> value);
    partial void OnIsLimitedInTimeChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnStartDayChanging(System.Nullable<int> value);
    partial void OnStartDayChanged();
    partial void OnEndDayChanging(System.Nullable<int> value);
    partial void OnEndDayChanged();
    partial void OnIsVisibleForAllChanging(System.Nullable<bool> value);
    partial void OnIsVisibleForAllChanged();
    partial void OnIsOpenForAllChanging(System.Nullable<bool> value);
    partial void OnIsOpenForAllChanged();
    #endregion
		
		public Ext_PrivateTournament()
		{
			this._Inti_Tournament = default(EntityRef<Inti_Tournament>);
			this._Sys_User = default(EntityRef<Sys_User>);
			this._Ext_PrivateTournamentParticipant = new EntitySet<Ext_PrivateTournamentParticipant>(new Action<Ext_PrivateTournamentParticipant>(this.attach_Ext_PrivateTournamentParticipant), new Action<Ext_PrivateTournamentParticipant>(this.detach_Ext_PrivateTournamentParticipant));
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TournamentGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TournamentGUID
		{
			get
			{
				return this._TournamentGUID;
			}
			set
			{
				if ((this._TournamentGUID != value))
				{
					if (this._Inti_Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentGUIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentGUID = value;
					this.SendPropertyChanged("TournamentGUID");
					this.OnTournamentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserGUID
		{
			get
			{
				return this._UserGUID;
			}
			set
			{
				if ((this._UserGUID != value))
				{
					if (this._Sys_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserGUIDChanging(value);
					this.SendPropertyChanging();
					this._UserGUID = value;
					this.SendPropertyChanged("UserGUID");
					this.OnUserGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(1024)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_IsLimitedInTime", DbType="Bit")]
		public System.Nullable<bool> IsLimitedInTime
		{
			get
			{
				return this._IsLimitedInTime;
			}
			set
			{
				if ((this._IsLimitedInTime != value))
				{
					this.OnIsLimitedInTimeChanging(value);
					this.SendPropertyChanging();
					this._IsLimitedInTime = value;
					this.SendPropertyChanged("IsLimitedInTime");
					this.OnIsLimitedInTimeChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_StartDay", DbType="Int")]
		public System.Nullable<int> StartDay
		{
			get
			{
				return this._StartDay;
			}
			set
			{
				if ((this._StartDay != value))
				{
					this.OnStartDayChanging(value);
					this.SendPropertyChanging();
					this._StartDay = value;
					this.SendPropertyChanged("StartDay");
					this.OnStartDayChanged();
				}
			}
		}
		
		[Column(Storage="_EndDay", DbType="Int")]
		public System.Nullable<int> EndDay
		{
			get
			{
				return this._EndDay;
			}
			set
			{
				if ((this._EndDay != value))
				{
					this.OnEndDayChanging(value);
					this.SendPropertyChanging();
					this._EndDay = value;
					this.SendPropertyChanged("EndDay");
					this.OnEndDayChanged();
				}
			}
		}
		
		[Column(Storage="_IsVisibleForAll", DbType="Bit")]
		public System.Nullable<bool> IsVisibleForAll
		{
			get
			{
				return this._IsVisibleForAll;
			}
			set
			{
				if ((this._IsVisibleForAll != value))
				{
					this.OnIsVisibleForAllChanging(value);
					this.SendPropertyChanging();
					this._IsVisibleForAll = value;
					this.SendPropertyChanged("IsVisibleForAll");
					this.OnIsVisibleForAllChanged();
				}
			}
		}
		
		[Column(Storage="_IsOpenForAll", DbType="Bit")]
		public System.Nullable<bool> IsOpenForAll
		{
			get
			{
				return this._IsOpenForAll;
			}
			set
			{
				if ((this._IsOpenForAll != value))
				{
					this.OnIsOpenForAllChanging(value);
					this.SendPropertyChanging();
					this._IsOpenForAll = value;
					this.SendPropertyChanged("IsOpenForAll");
					this.OnIsOpenForAllChanged();
				}
			}
		}
		
		[Association(Name="ext_PrivateTournament_Tournament", Storage="_Inti_Tournament", ThisKey="TournamentGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Tournament Inti_Tournament
		{
			get
			{
				return this._Inti_Tournament.Entity;
			}
			set
			{
				Inti_Tournament previousValue = this._Inti_Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Tournament.Entity = null;
						previousValue.Ext_PrivateTournament.Remove(this);
					}
					this._Inti_Tournament.Entity = value;
					if ((value != null))
					{
						value.Ext_PrivateTournament.Add(this);
						this._TournamentGUID = value.GUID;
					}
					else
					{
						this._TournamentGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Tournament");
				}
			}
		}
		
		[Association(Name="ext_PrivateTournament_User", Storage="_Sys_User", ThisKey="UserGUID", OtherKey="GUID", IsForeignKey=true)]
		public Sys_User Sys_User
		{
			get
			{
				return this._Sys_User.Entity;
			}
			set
			{
				Sys_User previousValue = this._Sys_User.Entity;
				if (((previousValue != value) 
							|| (this._Sys_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sys_User.Entity = null;
						previousValue.Ext_PrivateTournament.Remove(this);
					}
					this._Sys_User.Entity = value;
					if ((value != null))
					{
						value.Ext_PrivateTournament.Add(this);
						this._UserGUID = value.GUID;
					}
					else
					{
						this._UserGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Sys_User");
				}
			}
		}
		
		[Association(Name="FK_ext_PrivateTournamentParticipant_PrivateTournament", Storage="_Ext_PrivateTournamentParticipant", ThisKey="GUID", OtherKey="PrivateTournamentGUID", DeleteRule="NO ACTION")]
		public EntitySet<Ext_PrivateTournamentParticipant> Ext_PrivateTournamentParticipant
		{
			get
			{
				return this._Ext_PrivateTournamentParticipant;
			}
			set
			{
				this._Ext_PrivateTournamentParticipant.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ext_PrivateTournamentParticipant(Ext_PrivateTournamentParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Ext_PrivateTournament = this;
		}
		
		private void detach_Ext_PrivateTournamentParticipant(Ext_PrivateTournamentParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Ext_PrivateTournament = null;
		}
	}
	
	[Table(Name="dbo.ext_PrivateTournamentParticipant")]
	public partial class Ext_PrivateTournamentParticipant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PrivateTournamentGUID;
		
		private System.Guid _TeamGUID;
		
		private System.Nullable<bool> _IsAccepted;
		
		private EntityRef<Ext_PrivateTournament> _Ext_PrivateTournament;
		
		private EntityRef<Inti_Team> _Inti_Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrivateTournamentGUIDChanging(System.Guid value);
    partial void OnPrivateTournamentGUIDChanged();
    partial void OnTeamGUIDChanging(System.Guid value);
    partial void OnTeamGUIDChanged();
    partial void OnIsAcceptedChanging(System.Nullable<bool> value);
    partial void OnIsAcceptedChanged();
    #endregion
		
		public Ext_PrivateTournamentParticipant()
		{
			this._Ext_PrivateTournament = default(EntityRef<Ext_PrivateTournament>);
			this._Inti_Team = default(EntityRef<Inti_Team>);
			OnCreated();
		}
		
		[Column(Storage="_PrivateTournamentGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PrivateTournamentGUID
		{
			get
			{
				return this._PrivateTournamentGUID;
			}
			set
			{
				if ((this._PrivateTournamentGUID != value))
				{
					if (this._Ext_PrivateTournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrivateTournamentGUIDChanging(value);
					this.SendPropertyChanging();
					this._PrivateTournamentGUID = value;
					this.SendPropertyChanged("PrivateTournamentGUID");
					this.OnPrivateTournamentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeamGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TeamGUID
		{
			get
			{
				return this._TeamGUID;
			}
			set
			{
				if ((this._TeamGUID != value))
				{
					if (this._Inti_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamGUIDChanging(value);
					this.SendPropertyChanging();
					this._TeamGUID = value;
					this.SendPropertyChanged("TeamGUID");
					this.OnTeamGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsAccepted", DbType="Bit")]
		public System.Nullable<bool> IsAccepted
		{
			get
			{
				return this._IsAccepted;
			}
			set
			{
				if ((this._IsAccepted != value))
				{
					this.OnIsAcceptedChanging(value);
					this.SendPropertyChanging();
					this._IsAccepted = value;
					this.SendPropertyChanged("IsAccepted");
					this.OnIsAcceptedChanged();
				}
			}
		}
		
		[Association(Name="FK_ext_PrivateTournamentParticipant_PrivateTournament", Storage="_Ext_PrivateTournament", ThisKey="PrivateTournamentGUID", OtherKey="GUID", IsForeignKey=true)]
		public Ext_PrivateTournament Ext_PrivateTournament
		{
			get
			{
				return this._Ext_PrivateTournament.Entity;
			}
			set
			{
				Ext_PrivateTournament previousValue = this._Ext_PrivateTournament.Entity;
				if (((previousValue != value) 
							|| (this._Ext_PrivateTournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ext_PrivateTournament.Entity = null;
						previousValue.Ext_PrivateTournamentParticipant.Remove(this);
					}
					this._Ext_PrivateTournament.Entity = value;
					if ((value != null))
					{
						value.Ext_PrivateTournamentParticipant.Add(this);
						this._PrivateTournamentGUID = value.GUID;
					}
					else
					{
						this._PrivateTournamentGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Ext_PrivateTournament");
				}
			}
		}
		
		[Association(Name="FK_ext_PrivateTournamentParticipant_Team", Storage="_Inti_Team", ThisKey="TeamGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Team Inti_Team
		{
			get
			{
				return this._Inti_Team.Entity;
			}
			set
			{
				Inti_Team previousValue = this._Inti_Team.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Team.Entity = null;
						previousValue.Ext_PrivateTournamentParticipant.Remove(this);
					}
					this._Inti_Team.Entity = value;
					if ((value != null))
					{
						value.Ext_PrivateTournamentParticipant.Add(this);
						this._TeamGUID = value.GUID;
					}
					else
					{
						this._TeamGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ext_UserFavoriteTeam")]
	public partial class Ext_UserFavoriteTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserGUID;
		
		private System.Guid _TeamGUID;
		
		private EntityRef<Sys_User> _Sys_User;
		
		private EntityRef<Inti_Team> _Inti_Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserGUIDChanging(System.Guid value);
    partial void OnUserGUIDChanged();
    partial void OnTeamGUIDChanging(System.Guid value);
    partial void OnTeamGUIDChanged();
    #endregion
		
		public Ext_UserFavoriteTeam()
		{
			this._Sys_User = default(EntityRef<Sys_User>);
			this._Inti_Team = default(EntityRef<Inti_Team>);
			OnCreated();
		}
		
		[Column(Storage="_UserGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserGUID
		{
			get
			{
				return this._UserGUID;
			}
			set
			{
				if ((this._UserGUID != value))
				{
					if (this._Sys_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserGUIDChanging(value);
					this.SendPropertyChanging();
					this._UserGUID = value;
					this.SendPropertyChanged("UserGUID");
					this.OnUserGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeamGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TeamGUID
		{
			get
			{
				return this._TeamGUID;
			}
			set
			{
				if ((this._TeamGUID != value))
				{
					if (this._Inti_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamGUIDChanging(value);
					this.SendPropertyChanging();
					this._TeamGUID = value;
					this.SendPropertyChanged("TeamGUID");
					this.OnTeamGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_ext_UserFavoriteTeam_sys_User", Storage="_Sys_User", ThisKey="UserGUID", OtherKey="GUID", IsForeignKey=true)]
		public Sys_User Sys_User
		{
			get
			{
				return this._Sys_User.Entity;
			}
			set
			{
				if ((this._Sys_User.Entity != value))
				{
					this.SendPropertyChanging();
					this._Sys_User.Entity = value;
					this.SendPropertyChanged("Sys_User");
				}
			}
		}
		
		[Association(Name="FK_ext_UserFavoriteTeam_inti_Team", Storage="_Inti_Team", ThisKey="TeamGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Team Inti_Team
		{
			get
			{
				return this._Inti_Team.Entity;
			}
			set
			{
				if ((this._Inti_Team.Entity != value))
				{
					this.SendPropertyChanging();
					this._Inti_Team.Entity = value;
					this.SendPropertyChanged("Inti_Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.inti_Athlete")]
	public partial class Inti_Athlete : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Nation;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private string _Picture;
		
		private string _Description;
		
		private EntitySet<Inti_AthleteClub> _Inti_AthleteClub;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnNationChanging(string value);
    partial void OnNationChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Inti_Athlete()
		{
			this._Inti_AthleteClub = new EntitySet<Inti_AthleteClub>(new Action<Inti_AthleteClub>(this.attach_Inti_AthleteClub), new Action<Inti_AthleteClub>(this.detach_Inti_AthleteClub));
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Nation", DbType="VarChar(50)")]
		public string Nation
		{
			get
			{
				return this._Nation;
			}
			set
			{
				if ((this._Nation != value))
				{
					this.OnNationChanging(value);
					this.SendPropertyChanging();
					this._Nation = value;
					this.SendPropertyChanged("Nation");
					this.OnNationChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Column(Storage="_Picture", DbType="VarChar(255)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(1024)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="FK_inti_AthleteClub_Athlete", Storage="_Inti_AthleteClub", ThisKey="GUID", OtherKey="AthleteGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_AthleteClub> Inti_AthleteClub
		{
			get
			{
				return this._Inti_AthleteClub;
			}
			set
			{
				this._Inti_AthleteClub.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inti_AthleteClub(Inti_AthleteClub entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Athlete = this;
		}
		
		private void detach_Inti_AthleteClub(Inti_AthleteClub entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Athlete = null;
		}
	}
	
	[Table(Name="dbo.inti_AthleteClub")]
	public partial class Inti_AthleteClub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _AthleteGUID;
		
		private System.Guid _ClubGUID;
		
		private System.Guid _PositionGUID;
		
		private System.Nullable<int> _Price;
		
		private System.Nullable<bool> _IsActive;
		
		private EntityRef<Inti_Athlete> _Inti_Athlete;
		
		private EntityRef<Inti_Club> _Inti_Club;
		
		private EntityRef<Inti_Position> _Inti_Position;
		
		private EntitySet<Inti_TeamAthlete> _Inti_TeamAthlete;
		
		private EntitySet<Inti_TeamTransfer> _Inti_TeamTransfer;
		
		private EntitySet<Inti_TeamTransfer> _Inti_TeamTransfer_AthleteOut;
		
		private EntitySet<Inti_MatchPointEvent> _Inti_MatchPointEvent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnAthleteGUIDChanging(System.Guid value);
    partial void OnAthleteGUIDChanged();
    partial void OnClubGUIDChanging(System.Guid value);
    partial void OnClubGUIDChanged();
    partial void OnPositionGUIDChanging(System.Guid value);
    partial void OnPositionGUIDChanged();
    partial void OnPriceChanging(System.Nullable<int> value);
    partial void OnPriceChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Inti_AthleteClub()
		{
			this._Inti_Athlete = default(EntityRef<Inti_Athlete>);
			this._Inti_Club = default(EntityRef<Inti_Club>);
			this._Inti_Position = default(EntityRef<Inti_Position>);
			this._Inti_TeamAthlete = new EntitySet<Inti_TeamAthlete>(new Action<Inti_TeamAthlete>(this.attach_Inti_TeamAthlete), new Action<Inti_TeamAthlete>(this.detach_Inti_TeamAthlete));
			this._Inti_TeamTransfer = new EntitySet<Inti_TeamTransfer>(new Action<Inti_TeamTransfer>(this.attach_Inti_TeamTransfer), new Action<Inti_TeamTransfer>(this.detach_Inti_TeamTransfer));
			this._Inti_TeamTransfer_AthleteOut = new EntitySet<Inti_TeamTransfer>(new Action<Inti_TeamTransfer>(this.attach_Inti_TeamTransfer_AthleteOut), new Action<Inti_TeamTransfer>(this.detach_Inti_TeamTransfer_AthleteOut));
			this._Inti_MatchPointEvent = new EntitySet<Inti_MatchPointEvent>(new Action<Inti_MatchPointEvent>(this.attach_Inti_MatchPointEvent), new Action<Inti_MatchPointEvent>(this.detach_Inti_MatchPointEvent));
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_AthleteGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AthleteGUID
		{
			get
			{
				return this._AthleteGUID;
			}
			set
			{
				if ((this._AthleteGUID != value))
				{
					if (this._Inti_Athlete.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthleteGUIDChanging(value);
					this.SendPropertyChanging();
					this._AthleteGUID = value;
					this.SendPropertyChanged("AthleteGUID");
					this.OnAthleteGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClubGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ClubGUID
		{
			get
			{
				return this._ClubGUID;
			}
			set
			{
				if ((this._ClubGUID != value))
				{
					if (this._Inti_Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClubGUIDChanging(value);
					this.SendPropertyChanging();
					this._ClubGUID = value;
					this.SendPropertyChanged("ClubGUID");
					this.OnClubGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_PositionGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PositionGUID
		{
			get
			{
				return this._PositionGUID;
			}
			set
			{
				if ((this._PositionGUID != value))
				{
					if (this._Inti_Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionGUIDChanging(value);
					this.SendPropertyChanging();
					this._PositionGUID = value;
					this.SendPropertyChanged("PositionGUID");
					this.OnPositionGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Int")]
		public System.Nullable<int> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Association(Name="FK_inti_AthleteClub_Athlete", Storage="_Inti_Athlete", ThisKey="AthleteGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Athlete Inti_Athlete
		{
			get
			{
				return this._Inti_Athlete.Entity;
			}
			set
			{
				Inti_Athlete previousValue = this._Inti_Athlete.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Athlete.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Athlete.Entity = null;
						previousValue.Inti_AthleteClub.Remove(this);
					}
					this._Inti_Athlete.Entity = value;
					if ((value != null))
					{
						value.Inti_AthleteClub.Add(this);
						this._AthleteGUID = value.GUID;
					}
					else
					{
						this._AthleteGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Athlete");
				}
			}
		}
		
		[Association(Name="FK_inti_AthleteClub_Club", Storage="_Inti_Club", ThisKey="ClubGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Club Inti_Club
		{
			get
			{
				return this._Inti_Club.Entity;
			}
			set
			{
				Inti_Club previousValue = this._Inti_Club.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Club.Entity = null;
						previousValue.Inti_AthleteClub.Remove(this);
					}
					this._Inti_Club.Entity = value;
					if ((value != null))
					{
						value.Inti_AthleteClub.Add(this);
						this._ClubGUID = value.GUID;
					}
					else
					{
						this._ClubGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Club");
				}
			}
		}
		
		[Association(Name="FK_inti_AthleteClub_Position", Storage="_Inti_Position", ThisKey="PositionGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Position Inti_Position
		{
			get
			{
				return this._Inti_Position.Entity;
			}
			set
			{
				Inti_Position previousValue = this._Inti_Position.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Position.Entity = null;
						previousValue.Inti_AthleteClub.Remove(this);
					}
					this._Inti_Position.Entity = value;
					if ((value != null))
					{
						value.Inti_AthleteClub.Add(this);
						this._PositionGUID = value.GUID;
					}
					else
					{
						this._PositionGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Position");
				}
			}
		}
		
		[Association(Name="FK_inti_TeamAthlete_Athlete", Storage="_Inti_TeamAthlete", ThisKey="GUID", OtherKey="AthleteGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_TeamAthlete> Inti_TeamAthlete
		{
			get
			{
				return this._Inti_TeamAthlete;
			}
			set
			{
				this._Inti_TeamAthlete.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_TeamTransfer_AthleteIn", Storage="_Inti_TeamTransfer", ThisKey="GUID", OtherKey="AthleteInGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_TeamTransfer> Inti_TeamTransfer
		{
			get
			{
				return this._Inti_TeamTransfer;
			}
			set
			{
				this._Inti_TeamTransfer.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_TeamTransfer_AthleteOut", Storage="_Inti_TeamTransfer_AthleteOut", ThisKey="GUID", OtherKey="AthleteOutGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_TeamTransfer> Inti_TeamTransfer_AthleteOut
		{
			get
			{
				return this._Inti_TeamTransfer_AthleteOut;
			}
			set
			{
				this._Inti_TeamTransfer_AthleteOut.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_MatchPointEvent_AthleteClub", Storage="_Inti_MatchPointEvent", ThisKey="GUID", OtherKey="AthleteClubGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_MatchPointEvent> Inti_MatchPointEvent
		{
			get
			{
				return this._Inti_MatchPointEvent;
			}
			set
			{
				this._Inti_MatchPointEvent.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inti_TeamAthlete(Inti_TeamAthlete entity)
		{
			this.SendPropertyChanging();
			entity.Inti_AthleteClub = this;
		}
		
		private void detach_Inti_TeamAthlete(Inti_TeamAthlete entity)
		{
			this.SendPropertyChanging();
			entity.Inti_AthleteClub = null;
		}
		
		private void attach_Inti_TeamTransfer(Inti_TeamTransfer entity)
		{
			this.SendPropertyChanging();
			entity.Inti_AthleteClub = this;
		}
		
		private void detach_Inti_TeamTransfer(Inti_TeamTransfer entity)
		{
			this.SendPropertyChanging();
			entity.Inti_AthleteClub = null;
		}
		
		private void attach_Inti_TeamTransfer_AthleteOut(Inti_TeamTransfer entity)
		{
			this.SendPropertyChanging();
			entity.AthleteOutGU = this;
		}
		
		private void detach_Inti_TeamTransfer_AthleteOut(Inti_TeamTransfer entity)
		{
			this.SendPropertyChanging();
			entity.AthleteOutGU = null;
		}
		
		private void attach_Inti_MatchPointEvent(Inti_MatchPointEvent entity)
		{
			this.SendPropertyChanging();
			entity.Inti_AthleteClub = this;
		}
		
		private void detach_Inti_MatchPointEvent(Inti_MatchPointEvent entity)
		{
			this.SendPropertyChanging();
			entity.Inti_AthleteClub = null;
		}
	}
	
	[Table(Name="dbo.inti_Club")]
	public partial class Inti_Club : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _TournamentGUID;
		
		private string _ShortName;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Inti_AthleteClub> _Inti_AthleteClub;
		
		private EntitySet<Inti_Match> _Inti_Match;
		
		private EntitySet<Inti_Match> _Inti_Match_HomeClub;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnTournamentGUIDChanging(System.Guid value);
    partial void OnTournamentGUIDChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Inti_Club()
		{
			this._Inti_AthleteClub = new EntitySet<Inti_AthleteClub>(new Action<Inti_AthleteClub>(this.attach_Inti_AthleteClub), new Action<Inti_AthleteClub>(this.detach_Inti_AthleteClub));
			this._Inti_Match = new EntitySet<Inti_Match>(new Action<Inti_Match>(this.attach_Inti_Match), new Action<Inti_Match>(this.detach_Inti_Match));
			this._Inti_Match_HomeClub = new EntitySet<Inti_Match>(new Action<Inti_Match>(this.attach_Inti_Match_HomeClub), new Action<Inti_Match>(this.detach_Inti_Match_HomeClub));
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TournamentGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TournamentGUID
		{
			get
			{
				return this._TournamentGUID;
			}
			set
			{
				if ((this._TournamentGUID != value))
				{
					this.OnTournamentGUIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentGUID = value;
					this.SendPropertyChanged("TournamentGUID");
					this.OnTournamentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="FK_inti_AthleteClub_Club", Storage="_Inti_AthleteClub", ThisKey="GUID", OtherKey="ClubGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_AthleteClub> Inti_AthleteClub
		{
			get
			{
				return this._Inti_AthleteClub;
			}
			set
			{
				this._Inti_AthleteClub.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_Match_AwayClub", Storage="_Inti_Match", ThisKey="GUID", OtherKey="AwayClub", DeleteRule="NO ACTION")]
		public EntitySet<Inti_Match> Inti_Match
		{
			get
			{
				return this._Inti_Match;
			}
			set
			{
				this._Inti_Match.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_Match_HomeClub", Storage="_Inti_Match_HomeClub", ThisKey="GUID", OtherKey="HomeClub", DeleteRule="NO ACTION")]
		public EntitySet<Inti_Match> Inti_Match_HomeClub
		{
			get
			{
				return this._Inti_Match_HomeClub;
			}
			set
			{
				this._Inti_Match_HomeClub.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inti_AthleteClub(Inti_AthleteClub entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Club = this;
		}
		
		private void detach_Inti_AthleteClub(Inti_AthleteClub entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Club = null;
		}
		
		private void attach_Inti_Match(Inti_Match entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Club = this;
		}
		
		private void detach_Inti_Match(Inti_Match entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Club = null;
		}
		
		private void attach_Inti_Match_HomeClub(Inti_Match entity)
		{
			this.SendPropertyChanging();
			entity.HomeClubInti_Club = this;
		}
		
		private void detach_Inti_Match_HomeClub(Inti_Match entity)
		{
			this.SendPropertyChanging();
			entity.HomeClubInti_Club = null;
		}
	}
	
	[Table(Name="dbo.inti_Match")]
	public partial class Inti_Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _TournamentGUID;
		
		private int _TourDay;
		
		private System.Nullable<System.DateTime> _MatchDate;
		
		private System.Guid _HomeClub;
		
		private System.Guid _AwayClub;
		
		private System.Nullable<int> _HomeScore;
		
		private System.Nullable<int> _AwayScore;
		
		private System.Nullable<bool> _IsUpdated;
		
		private System.Nullable<System.Guid> _Updater;
		
		private System.Nullable<System.DateTime> _StartUpdateDate;
		
		private EntityRef<Inti_Club> _Inti_Club;
		
		private EntityRef<Inti_Club> _HomeClubInti_Club;
		
		private EntityRef<Inti_Tournament> _Inti_Tournament;
		
		private EntitySet<Inti_MatchPointEvent> _Inti_MatchPointEvent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnTournamentGUIDChanging(System.Guid value);
    partial void OnTournamentGUIDChanged();
    partial void OnTourDayChanging(int value);
    partial void OnTourDayChanged();
    partial void OnMatchDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMatchDateChanged();
    partial void OnHomeClubChanging(System.Guid value);
    partial void OnHomeClubChanged();
    partial void OnAwayClubChanging(System.Guid value);
    partial void OnAwayClubChanged();
    partial void OnHomeScoreChanging(System.Nullable<int> value);
    partial void OnHomeScoreChanged();
    partial void OnAwayScoreChanging(System.Nullable<int> value);
    partial void OnAwayScoreChanged();
    partial void OnIsUpdatedChanging(System.Nullable<bool> value);
    partial void OnIsUpdatedChanged();
    partial void OnUpdaterChanging(System.Nullable<System.Guid> value);
    partial void OnUpdaterChanged();
    partial void OnStartUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartUpdateDateChanged();
    #endregion
		
		public Inti_Match()
		{
			this._Inti_Club = default(EntityRef<Inti_Club>);
			this._HomeClubInti_Club = default(EntityRef<Inti_Club>);
			this._Inti_Tournament = default(EntityRef<Inti_Tournament>);
			this._Inti_MatchPointEvent = new EntitySet<Inti_MatchPointEvent>(new Action<Inti_MatchPointEvent>(this.attach_Inti_MatchPointEvent), new Action<Inti_MatchPointEvent>(this.detach_Inti_MatchPointEvent));
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TournamentGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TournamentGUID
		{
			get
			{
				return this._TournamentGUID;
			}
			set
			{
				if ((this._TournamentGUID != value))
				{
					if (this._Inti_Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentGUIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentGUID = value;
					this.SendPropertyChanged("TournamentGUID");
					this.OnTournamentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TourDay", DbType="Int NOT NULL")]
		public int TourDay
		{
			get
			{
				return this._TourDay;
			}
			set
			{
				if ((this._TourDay != value))
				{
					this.OnTourDayChanging(value);
					this.SendPropertyChanging();
					this._TourDay = value;
					this.SendPropertyChanged("TourDay");
					this.OnTourDayChanged();
				}
			}
		}
		
		[Column(Storage="_MatchDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> MatchDate
		{
			get
			{
				return this._MatchDate;
			}
			set
			{
				if ((this._MatchDate != value))
				{
					this.OnMatchDateChanging(value);
					this.SendPropertyChanging();
					this._MatchDate = value;
					this.SendPropertyChanged("MatchDate");
					this.OnMatchDateChanged();
				}
			}
		}
		
		[Column(Storage="_HomeClub", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid HomeClub
		{
			get
			{
				return this._HomeClub;
			}
			set
			{
				if ((this._HomeClub != value))
				{
					if (this._HomeClubInti_Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeClubChanging(value);
					this.SendPropertyChanging();
					this._HomeClub = value;
					this.SendPropertyChanged("HomeClub");
					this.OnHomeClubChanged();
				}
			}
		}
		
		[Column(Storage="_AwayClub", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AwayClub
		{
			get
			{
				return this._AwayClub;
			}
			set
			{
				if ((this._AwayClub != value))
				{
					if (this._Inti_Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAwayClubChanging(value);
					this.SendPropertyChanging();
					this._AwayClub = value;
					this.SendPropertyChanged("AwayClub");
					this.OnAwayClubChanged();
				}
			}
		}
		
		[Column(Storage="_HomeScore", DbType="Int")]
		public System.Nullable<int> HomeScore
		{
			get
			{
				return this._HomeScore;
			}
			set
			{
				if ((this._HomeScore != value))
				{
					this.OnHomeScoreChanging(value);
					this.SendPropertyChanging();
					this._HomeScore = value;
					this.SendPropertyChanged("HomeScore");
					this.OnHomeScoreChanged();
				}
			}
		}
		
		[Column(Storage="_AwayScore", DbType="Int")]
		public System.Nullable<int> AwayScore
		{
			get
			{
				return this._AwayScore;
			}
			set
			{
				if ((this._AwayScore != value))
				{
					this.OnAwayScoreChanging(value);
					this.SendPropertyChanging();
					this._AwayScore = value;
					this.SendPropertyChanged("AwayScore");
					this.OnAwayScoreChanged();
				}
			}
		}
		
		[Column(Storage="_IsUpdated", DbType="Bit")]
		public System.Nullable<bool> IsUpdated
		{
			get
			{
				return this._IsUpdated;
			}
			set
			{
				if ((this._IsUpdated != value))
				{
					this.OnIsUpdatedChanging(value);
					this.SendPropertyChanging();
					this._IsUpdated = value;
					this.SendPropertyChanged("IsUpdated");
					this.OnIsUpdatedChanged();
				}
			}
		}
		
		[Column(Storage="_Updater", DbType="UniqueIdentifier NULL")]
		public System.Nullable<System.Guid> Updater
		{
			get
			{
				return this._Updater;
			}
			set
			{
				if ((this._Updater != value))
				{
					this.OnUpdaterChanging(value);
					this.SendPropertyChanging();
					this._Updater = value;
					this.SendPropertyChanged("Updater");
					this.OnUpdaterChanged();
				}
			}
		}
		
		[Column(Storage="_StartUpdateDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> StartUpdateDate
		{
			get
			{
				return this._StartUpdateDate;
			}
			set
			{
				if ((this._StartUpdateDate != value))
				{
					this.OnStartUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._StartUpdateDate = value;
					this.SendPropertyChanged("StartUpdateDate");
					this.OnStartUpdateDateChanged();
				}
			}
		}
		
		[Association(Name="FK_inti_Match_AwayClub", Storage="_Inti_Club", ThisKey="AwayClub", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Club Inti_Club
		{
			get
			{
				return this._Inti_Club.Entity;
			}
			set
			{
				Inti_Club previousValue = this._Inti_Club.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Club.Entity = null;
						previousValue.Inti_Match.Remove(this);
					}
					this._Inti_Club.Entity = value;
					if ((value != null))
					{
						value.Inti_Match.Add(this);
						this._AwayClub = value.GUID;
					}
					else
					{
						this._AwayClub = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Club");
				}
			}
		}
		
		[Association(Name="FK_inti_Match_HomeClub", Storage="_HomeClubInti_Club", ThisKey="HomeClub", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Club HomeClubInti_Club
		{
			get
			{
				return this._HomeClubInti_Club.Entity;
			}
			set
			{
				Inti_Club previousValue = this._HomeClubInti_Club.Entity;
				if (((previousValue != value) 
							|| (this._HomeClubInti_Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HomeClubInti_Club.Entity = null;
						previousValue.Inti_Match_HomeClub.Remove(this);
					}
					this._HomeClubInti_Club.Entity = value;
					if ((value != null))
					{
						value.Inti_Match_HomeClub.Add(this);
						this._HomeClub = value.GUID;
					}
					else
					{
						this._HomeClub = default(System.Guid);
					}
					this.SendPropertyChanged("HomeClubInti_Club");
				}
			}
		}
		
		[Association(Name="FK_inti_Match_Tournament", Storage="_Inti_Tournament", ThisKey="TournamentGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Tournament Inti_Tournament
		{
			get
			{
				return this._Inti_Tournament.Entity;
			}
			set
			{
				Inti_Tournament previousValue = this._Inti_Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Tournament.Entity = null;
						previousValue.Inti_Match.Remove(this);
					}
					this._Inti_Tournament.Entity = value;
					if ((value != null))
					{
						value.Inti_Match.Add(this);
						this._TournamentGUID = value.GUID;
					}
					else
					{
						this._TournamentGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Tournament");
				}
			}
		}
		
		[Association(Name="FK_inti_MatchPointEvent_Match", Storage="_Inti_MatchPointEvent", ThisKey="GUID", OtherKey="MatchGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_MatchPointEvent> Inti_MatchPointEvent
		{
			get
			{
				return this._Inti_MatchPointEvent;
			}
			set
			{
				this._Inti_MatchPointEvent.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inti_MatchPointEvent(Inti_MatchPointEvent entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Match = this;
		}
		
		private void detach_Inti_MatchPointEvent(Inti_MatchPointEvent entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Match = null;
		}
	}
	
	[Table(Name="dbo.inti_MatchPointEvent")]
	public partial class Inti_MatchPointEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _MatchGUID;
		
		private System.Guid _PointEventGUID;
		
		private System.Guid _AthleteClubGUID;
		
		private int _Points;
		
		private EntityRef<Inti_Match> _Inti_Match;
		
		private EntityRef<Inti_PointEvent> _Inti_PointEvent;
		
		private EntityRef<Inti_AthleteClub> _Inti_AthleteClub;
		
		private EntitySet<Inti_TeamPointEvents> _Inti_TeamPointEvents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnMatchGUIDChanging(System.Guid value);
    partial void OnMatchGUIDChanged();
    partial void OnPointEventGUIDChanging(System.Guid value);
    partial void OnPointEventGUIDChanged();
    partial void OnAthleteClubGUIDChanging(System.Guid value);
    partial void OnAthleteClubGUIDChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    #endregion
		
		public Inti_MatchPointEvent()
		{
			this._Inti_Match = default(EntityRef<Inti_Match>);
			this._Inti_PointEvent = default(EntityRef<Inti_PointEvent>);
			this._Inti_AthleteClub = default(EntityRef<Inti_AthleteClub>);
			this._Inti_TeamPointEvents = new EntitySet<Inti_TeamPointEvents>(new Action<Inti_TeamPointEvents>(this.attach_Inti_TeamPointEvents), new Action<Inti_TeamPointEvents>(this.detach_Inti_TeamPointEvents));
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_MatchGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MatchGUID
		{
			get
			{
				return this._MatchGUID;
			}
			set
			{
				if ((this._MatchGUID != value))
				{
					if (this._Inti_Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchGUIDChanging(value);
					this.SendPropertyChanging();
					this._MatchGUID = value;
					this.SendPropertyChanged("MatchGUID");
					this.OnMatchGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_PointEventGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PointEventGUID
		{
			get
			{
				return this._PointEventGUID;
			}
			set
			{
				if ((this._PointEventGUID != value))
				{
					if (this._Inti_PointEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPointEventGUIDChanging(value);
					this.SendPropertyChanging();
					this._PointEventGUID = value;
					this.SendPropertyChanged("PointEventGUID");
					this.OnPointEventGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_AthleteClubGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AthleteClubGUID
		{
			get
			{
				return this._AthleteClubGUID;
			}
			set
			{
				if ((this._AthleteClubGUID != value))
				{
					if (this._Inti_AthleteClub.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthleteClubGUIDChanging(value);
					this.SendPropertyChanging();
					this._AthleteClubGUID = value;
					this.SendPropertyChanged("AthleteClubGUID");
					this.OnAthleteClubGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Association(Name="FK_inti_MatchPointEvent_Match", Storage="_Inti_Match", ThisKey="MatchGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Match Inti_Match
		{
			get
			{
				return this._Inti_Match.Entity;
			}
			set
			{
				Inti_Match previousValue = this._Inti_Match.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Match.Entity = null;
						previousValue.Inti_MatchPointEvent.Remove(this);
					}
					this._Inti_Match.Entity = value;
					if ((value != null))
					{
						value.Inti_MatchPointEvent.Add(this);
						this._MatchGUID = value.GUID;
					}
					else
					{
						this._MatchGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Match");
				}
			}
		}
		
		[Association(Name="FK_inti_MatchPointEvent_PointEvent", Storage="_Inti_PointEvent", ThisKey="PointEventGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_PointEvent Inti_PointEvent
		{
			get
			{
				return this._Inti_PointEvent.Entity;
			}
			set
			{
				Inti_PointEvent previousValue = this._Inti_PointEvent.Entity;
				if (((previousValue != value) 
							|| (this._Inti_PointEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_PointEvent.Entity = null;
						previousValue.Inti_MatchPointEvent.Remove(this);
					}
					this._Inti_PointEvent.Entity = value;
					if ((value != null))
					{
						value.Inti_MatchPointEvent.Add(this);
						this._PointEventGUID = value.GUID;
					}
					else
					{
						this._PointEventGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_PointEvent");
				}
			}
		}
		
		[Association(Name="FK_inti_MatchPointEvent_AthleteClub", Storage="_Inti_AthleteClub", ThisKey="AthleteClubGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_AthleteClub Inti_AthleteClub
		{
			get
			{
				return this._Inti_AthleteClub.Entity;
			}
			set
			{
				Inti_AthleteClub previousValue = this._Inti_AthleteClub.Entity;
				if (((previousValue != value) 
							|| (this._Inti_AthleteClub.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_AthleteClub.Entity = null;
						previousValue.Inti_MatchPointEvent.Remove(this);
					}
					this._Inti_AthleteClub.Entity = value;
					if ((value != null))
					{
						value.Inti_MatchPointEvent.Add(this);
						this._AthleteClubGUID = value.GUID;
					}
					else
					{
						this._AthleteClubGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_AthleteClub");
				}
			}
		}
		
		[Association(Name="FK_inti_TeamPointEvents_MatchPointEvent", Storage="_Inti_TeamPointEvents", ThisKey="GUID", OtherKey="MatchPointEventGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_TeamPointEvents> Inti_TeamPointEvents
		{
			get
			{
				return this._Inti_TeamPointEvents;
			}
			set
			{
				this._Inti_TeamPointEvents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inti_TeamPointEvents(Inti_TeamPointEvents entity)
		{
			this.SendPropertyChanging();
			entity.Inti_MatchPointEvent = this;
		}
		
		private void detach_Inti_TeamPointEvents(Inti_TeamPointEvents entity)
		{
			this.SendPropertyChanging();
			entity.Inti_MatchPointEvent = null;
		}
	}
	
	[Table(Name="dbo.inti_PointEvent")]
	public partial class Inti_PointEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Nullable<System.Guid> _TournamentGUID;
		
		private string _Name;
		
		private EntitySet<Inti_MatchPointEvent> _Inti_MatchPointEvent;
		
		private EntityRef<Inti_Tournament> _Inti_Tournament;
		
		private EntitySet<Inti_PointEventPosition> _Inti_PointEventPosition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnTournamentGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnTournamentGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Inti_PointEvent()
		{
			this._Inti_MatchPointEvent = new EntitySet<Inti_MatchPointEvent>(new Action<Inti_MatchPointEvent>(this.attach_Inti_MatchPointEvent), new Action<Inti_MatchPointEvent>(this.detach_Inti_MatchPointEvent));
			this._Inti_Tournament = default(EntityRef<Inti_Tournament>);
			this._Inti_PointEventPosition = new EntitySet<Inti_PointEventPosition>(new Action<Inti_PointEventPosition>(this.attach_Inti_PointEventPosition), new Action<Inti_PointEventPosition>(this.detach_Inti_PointEventPosition));
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TournamentGUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TournamentGUID
		{
			get
			{
				return this._TournamentGUID;
			}
			set
			{
				if ((this._TournamentGUID != value))
				{
					if (this._Inti_Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentGUIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentGUID = value;
					this.SendPropertyChanged("TournamentGUID");
					this.OnTournamentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_inti_MatchPointEvent_PointEvent", Storage="_Inti_MatchPointEvent", ThisKey="GUID", OtherKey="PointEventGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_MatchPointEvent> Inti_MatchPointEvent
		{
			get
			{
				return this._Inti_MatchPointEvent;
			}
			set
			{
				this._Inti_MatchPointEvent.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_PointEvent_Tournament", Storage="_Inti_Tournament", ThisKey="TournamentGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Tournament Inti_Tournament
		{
			get
			{
				return this._Inti_Tournament.Entity;
			}
			set
			{
				Inti_Tournament previousValue = this._Inti_Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Tournament.Entity = null;
						previousValue.Inti_PointEvent.Remove(this);
					}
					this._Inti_Tournament.Entity = value;
					if ((value != null))
					{
						value.Inti_PointEvent.Add(this);
						this._TournamentGUID = value.GUID;
					}
					else
					{
						this._TournamentGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Inti_Tournament");
				}
			}
		}
		
		[Association(Name="FK_inti_PointEventPosition_PointEvent", Storage="_Inti_PointEventPosition", ThisKey="GUID", OtherKey="PointEventGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_PointEventPosition> Inti_PointEventPosition
		{
			get
			{
				return this._Inti_PointEventPosition;
			}
			set
			{
				this._Inti_PointEventPosition.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inti_MatchPointEvent(Inti_MatchPointEvent entity)
		{
			this.SendPropertyChanging();
			entity.Inti_PointEvent = this;
		}
		
		private void detach_Inti_MatchPointEvent(Inti_MatchPointEvent entity)
		{
			this.SendPropertyChanging();
			entity.Inti_PointEvent = null;
		}
		
		private void attach_Inti_PointEventPosition(Inti_PointEventPosition entity)
		{
			this.SendPropertyChanging();
			entity.Inti_PointEvent = this;
		}
		
		private void detach_Inti_PointEventPosition(Inti_PointEventPosition entity)
		{
			this.SendPropertyChanging();
			entity.Inti_PointEvent = null;
		}
	}
	
	[Table(Name="dbo.inti_PointEventPosition")]
	public partial class Inti_PointEventPosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PointEventGUID;
		
		private System.Guid _PositionGUID;
		
		private int _Points;
		
		private EntityRef<Inti_PointEvent> _Inti_PointEvent;
		
		private EntityRef<Inti_Position> _Inti_Position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPointEventGUIDChanging(System.Guid value);
    partial void OnPointEventGUIDChanged();
    partial void OnPositionGUIDChanging(System.Guid value);
    partial void OnPositionGUIDChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    #endregion
		
		public Inti_PointEventPosition()
		{
			this._Inti_PointEvent = default(EntityRef<Inti_PointEvent>);
			this._Inti_Position = default(EntityRef<Inti_Position>);
			OnCreated();
		}
		
		[Column(Storage="_PointEventGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PointEventGUID
		{
			get
			{
				return this._PointEventGUID;
			}
			set
			{
				if ((this._PointEventGUID != value))
				{
					if (this._Inti_PointEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPointEventGUIDChanging(value);
					this.SendPropertyChanging();
					this._PointEventGUID = value;
					this.SendPropertyChanged("PointEventGUID");
					this.OnPointEventGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_PositionGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PositionGUID
		{
			get
			{
				return this._PositionGUID;
			}
			set
			{
				if ((this._PositionGUID != value))
				{
					if (this._Inti_Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionGUIDChanging(value);
					this.SendPropertyChanging();
					this._PositionGUID = value;
					this.SendPropertyChanged("PositionGUID");
					this.OnPositionGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Association(Name="FK_inti_PointEventPosition_PointEvent", Storage="_Inti_PointEvent", ThisKey="PointEventGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_PointEvent Inti_PointEvent
		{
			get
			{
				return this._Inti_PointEvent.Entity;
			}
			set
			{
				Inti_PointEvent previousValue = this._Inti_PointEvent.Entity;
				if (((previousValue != value) 
							|| (this._Inti_PointEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_PointEvent.Entity = null;
						previousValue.Inti_PointEventPosition.Remove(this);
					}
					this._Inti_PointEvent.Entity = value;
					if ((value != null))
					{
						value.Inti_PointEventPosition.Add(this);
						this._PointEventGUID = value.GUID;
					}
					else
					{
						this._PointEventGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_PointEvent");
				}
			}
		}
		
		[Association(Name="FK_inti_PointEventPosition_Position", Storage="_Inti_Position", ThisKey="PositionGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Position Inti_Position
		{
			get
			{
				return this._Inti_Position.Entity;
			}
			set
			{
				Inti_Position previousValue = this._Inti_Position.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Position.Entity = null;
						previousValue.Inti_PointEventPosition.Remove(this);
					}
					this._Inti_Position.Entity = value;
					if ((value != null))
					{
						value.Inti_PointEventPosition.Add(this);
						this._PositionGUID = value.GUID;
					}
					else
					{
						this._PositionGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Position");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.inti_Position")]
	public partial class Inti_Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _ShortName;
		
		private string _Name;
		
		private int _SortOrder;
		
		private EntitySet<Inti_AthleteClub> _Inti_AthleteClub;
		
		private EntitySet<Inti_PointEventPosition> _Inti_PointEventPosition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    #endregion
		
		public Inti_Position()
		{
			this._Inti_AthleteClub = new EntitySet<Inti_AthleteClub>(new Action<Inti_AthleteClub>(this.attach_Inti_AthleteClub), new Action<Inti_AthleteClub>(this.detach_Inti_AthleteClub));
			this._Inti_PointEventPosition = new EntitySet<Inti_PointEventPosition>(new Action<Inti_PointEventPosition>(this.attach_Inti_PointEventPosition), new Action<Inti_PointEventPosition>(this.detach_Inti_PointEventPosition));
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_SortOrder", DbType="Int NOT NULL")]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[Association(Name="FK_inti_AthleteClub_Position", Storage="_Inti_AthleteClub", ThisKey="GUID", OtherKey="PositionGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_AthleteClub> Inti_AthleteClub
		{
			get
			{
				return this._Inti_AthleteClub;
			}
			set
			{
				this._Inti_AthleteClub.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_PointEventPosition_Position", Storage="_Inti_PointEventPosition", ThisKey="GUID", OtherKey="PositionGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_PointEventPosition> Inti_PointEventPosition
		{
			get
			{
				return this._Inti_PointEventPosition;
			}
			set
			{
				this._Inti_PointEventPosition.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inti_AthleteClub(Inti_AthleteClub entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Position = this;
		}
		
		private void detach_Inti_AthleteClub(Inti_AthleteClub entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Position = null;
		}
		
		private void attach_Inti_PointEventPosition(Inti_PointEventPosition entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Position = this;
		}
		
		private void detach_Inti_PointEventPosition(Inti_PointEventPosition entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Position = null;
		}
	}
	
	[Table(Name="dbo.inti_Team")]
	public partial class Inti_Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _TournamentGUID;
		
		private System.Guid _UserGUID;
		
		private string _Name;
		
		private string _Picture;
		
		private string _Presentation;
		
		private System.Nullable<int> _BonusPoints;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<bool> _IsPaid;
		
		private EntitySet<Ext_PrivateTournamentParticipant> _Ext_PrivateTournamentParticipant;
		
		private EntityRef<Inti_Tournament> _Inti_Tournament;
		
		private EntityRef<Sys_User> _Sys_User;
		
		private EntitySet<Inti_TeamTransfer> _Inti_TeamTransfer;
		
		private EntitySet<Inti_TeamVersion> _Inti_TeamVersion;
		
		private EntitySet<Inti_TeamPointEvents> _Inti_TeamPointEvents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnTournamentGUIDChanging(System.Guid value);
    partial void OnTournamentGUIDChanged();
    partial void OnUserGUIDChanging(System.Guid value);
    partial void OnUserGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnPresentationChanging(string value);
    partial void OnPresentationChanged();
    partial void OnBonusPointsChanging(System.Nullable<int> value);
    partial void OnBonusPointsChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnIsPaidChanging(System.Nullable<bool> value);
    partial void OnIsPaidChanged();
    #endregion
		
		public Inti_Team()
		{
			this._Ext_PrivateTournamentParticipant = new EntitySet<Ext_PrivateTournamentParticipant>(new Action<Ext_PrivateTournamentParticipant>(this.attach_Ext_PrivateTournamentParticipant), new Action<Ext_PrivateTournamentParticipant>(this.detach_Ext_PrivateTournamentParticipant));
			this._Inti_Tournament = default(EntityRef<Inti_Tournament>);
			this._Sys_User = default(EntityRef<Sys_User>);
			this._Inti_TeamTransfer = new EntitySet<Inti_TeamTransfer>(new Action<Inti_TeamTransfer>(this.attach_Inti_TeamTransfer), new Action<Inti_TeamTransfer>(this.detach_Inti_TeamTransfer));
			this._Inti_TeamVersion = new EntitySet<Inti_TeamVersion>(new Action<Inti_TeamVersion>(this.attach_Inti_TeamVersion), new Action<Inti_TeamVersion>(this.detach_Inti_TeamVersion));
			this._Inti_TeamPointEvents = new EntitySet<Inti_TeamPointEvents>(new Action<Inti_TeamPointEvents>(this.attach_Inti_TeamPointEvents), new Action<Inti_TeamPointEvents>(this.detach_Inti_TeamPointEvents));
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TournamentGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TournamentGUID
		{
			get
			{
				return this._TournamentGUID;
			}
			set
			{
				if ((this._TournamentGUID != value))
				{
					if (this._Inti_Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentGUIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentGUID = value;
					this.SendPropertyChanged("TournamentGUID");
					this.OnTournamentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserGUID
		{
			get
			{
				return this._UserGUID;
			}
			set
			{
				if ((this._UserGUID != value))
				{
					if (this._Sys_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserGUIDChanging(value);
					this.SendPropertyChanging();
					this._UserGUID = value;
					this.SendPropertyChanged("UserGUID");
					this.OnUserGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Picture", DbType="VarChar(255)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[Column(Storage="_Presentation", DbType="VarChar(1024)")]
		public string Presentation
		{
			get
			{
				return this._Presentation;
			}
			set
			{
				if ((this._Presentation != value))
				{
					this.OnPresentationChanging(value);
					this.SendPropertyChanging();
					this._Presentation = value;
					this.SendPropertyChanged("Presentation");
					this.OnPresentationChanged();
				}
			}
		}
		
		[Column(Storage="_BonusPoints", DbType="Int")]
		public System.Nullable<int> BonusPoints
		{
			get
			{
				return this._BonusPoints;
			}
			set
			{
				if ((this._BonusPoints != value))
				{
					this.OnBonusPointsChanging(value);
					this.SendPropertyChanging();
					this._BonusPoints = value;
					this.SendPropertyChanged("BonusPoints");
					this.OnBonusPointsChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_IsPaid", DbType="Bit")]
		public System.Nullable<bool> IsPaid
		{
			get
			{
				return this._IsPaid;
			}
			set
			{
				if ((this._IsPaid != value))
				{
					this.OnIsPaidChanging(value);
					this.SendPropertyChanging();
					this._IsPaid = value;
					this.SendPropertyChanged("IsPaid");
					this.OnIsPaidChanged();
				}
			}
		}
		
		[Association(Name="FK_ext_PrivateTournamentParticipant_Team", Storage="_Ext_PrivateTournamentParticipant", ThisKey="GUID", OtherKey="TeamGUID", DeleteRule="NO ACTION")]
		public EntitySet<Ext_PrivateTournamentParticipant> Ext_PrivateTournamentParticipant
		{
			get
			{
				return this._Ext_PrivateTournamentParticipant;
			}
			set
			{
				this._Ext_PrivateTournamentParticipant.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_Team_Tournament", Storage="_Inti_Tournament", ThisKey="TournamentGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Tournament Inti_Tournament
		{
			get
			{
				return this._Inti_Tournament.Entity;
			}
			set
			{
				Inti_Tournament previousValue = this._Inti_Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Tournament.Entity = null;
						previousValue.Inti_Team.Remove(this);
					}
					this._Inti_Tournament.Entity = value;
					if ((value != null))
					{
						value.Inti_Team.Add(this);
						this._TournamentGUID = value.GUID;
					}
					else
					{
						this._TournamentGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Tournament");
				}
			}
		}
		
		[Association(Name="FK_inti_Team_User", Storage="_Sys_User", ThisKey="UserGUID", OtherKey="GUID", IsForeignKey=true)]
		public Sys_User Sys_User
		{
			get
			{
				return this._Sys_User.Entity;
			}
			set
			{
				Sys_User previousValue = this._Sys_User.Entity;
				if (((previousValue != value) 
							|| (this._Sys_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sys_User.Entity = null;
						previousValue.Inti_Team.Remove(this);
					}
					this._Sys_User.Entity = value;
					if ((value != null))
					{
						value.Inti_Team.Add(this);
						this._UserGUID = value.GUID;
					}
					else
					{
						this._UserGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Sys_User");
				}
			}
		}
		
		[Association(Name="FK_inti_TeamTransfer_Team", Storage="_Inti_TeamTransfer", ThisKey="GUID", OtherKey="TeamGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_TeamTransfer> Inti_TeamTransfer
		{
			get
			{
				return this._Inti_TeamTransfer;
			}
			set
			{
				this._Inti_TeamTransfer.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_TeamVersion", Storage="_Inti_TeamVersion", ThisKey="GUID", OtherKey="TeamGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_TeamVersion> Inti_TeamVersion
		{
			get
			{
				return this._Inti_TeamVersion;
			}
			set
			{
				this._Inti_TeamVersion.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_TeamPointEvents_Team", Storage="_Inti_TeamPointEvents", ThisKey="GUID", OtherKey="TeamGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_TeamPointEvents> Inti_TeamPointEvents
		{
			get
			{
				return this._Inti_TeamPointEvents;
			}
			set
			{
				this._Inti_TeamPointEvents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ext_PrivateTournamentParticipant(Ext_PrivateTournamentParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Team = this;
		}
		
		private void detach_Ext_PrivateTournamentParticipant(Ext_PrivateTournamentParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Team = null;
		}
		
		private void attach_Inti_TeamTransfer(Inti_TeamTransfer entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Team = this;
		}
		
		private void detach_Inti_TeamTransfer(Inti_TeamTransfer entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Team = null;
		}
		
		private void attach_Inti_TeamVersion(Inti_TeamVersion entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Team = this;
		}
		
		private void detach_Inti_TeamVersion(Inti_TeamVersion entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Team = null;
		}
		
		private void attach_Inti_TeamPointEvents(Inti_TeamPointEvents entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Team = this;
		}
		
		private void detach_Inti_TeamPointEvents(Inti_TeamPointEvents entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Team = null;
		}
	}
	
	[Table(Name="dbo.inti_TeamAthlete")]
	public partial class Inti_TeamAthlete : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AthleteGUID;
		
		private System.Guid _TeamVersionGUID;
		
		private System.Nullable<int> _Points;
		
		private EntityRef<Inti_AthleteClub> _Inti_AthleteClub;
		
		private EntityRef<Inti_TeamVersion> _Inti_TeamVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAthleteGUIDChanging(System.Guid value);
    partial void OnAthleteGUIDChanged();
    partial void OnTeamVersionGUIDChanging(System.Guid value);
    partial void OnTeamVersionGUIDChanged();
    partial void OnPointsChanging(System.Nullable<int> value);
    partial void OnPointsChanged();
    #endregion
		
		public Inti_TeamAthlete()
		{
			this._Inti_AthleteClub = default(EntityRef<Inti_AthleteClub>);
			this._Inti_TeamVersion = default(EntityRef<Inti_TeamVersion>);
			OnCreated();
		}
		
		[Column(Storage="_AthleteGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AthleteGUID
		{
			get
			{
				return this._AthleteGUID;
			}
			set
			{
				if ((this._AthleteGUID != value))
				{
					if (this._Inti_AthleteClub.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthleteGUIDChanging(value);
					this.SendPropertyChanging();
					this._AthleteGUID = value;
					this.SendPropertyChanged("AthleteGUID");
					this.OnAthleteGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeamVersionGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TeamVersionGUID
		{
			get
			{
				return this._TeamVersionGUID;
			}
			set
			{
				if ((this._TeamVersionGUID != value))
				{
					if (this._Inti_TeamVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamVersionGUIDChanging(value);
					this.SendPropertyChanging();
					this._TeamVersionGUID = value;
					this.SendPropertyChanged("TeamVersionGUID");
					this.OnTeamVersionGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="Int")]
		public System.Nullable<int> Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Association(Name="FK_inti_TeamAthlete_Athlete", Storage="_Inti_AthleteClub", ThisKey="AthleteGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_AthleteClub Inti_AthleteClub
		{
			get
			{
				return this._Inti_AthleteClub.Entity;
			}
			set
			{
				Inti_AthleteClub previousValue = this._Inti_AthleteClub.Entity;
				if (((previousValue != value) 
							|| (this._Inti_AthleteClub.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_AthleteClub.Entity = null;
						previousValue.Inti_TeamAthlete.Remove(this);
					}
					this._Inti_AthleteClub.Entity = value;
					if ((value != null))
					{
						value.Inti_TeamAthlete.Add(this);
						this._AthleteGUID = value.GUID;
					}
					else
					{
						this._AthleteGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_AthleteClub");
				}
			}
		}
		
		[Association(Name="FK_inti_TeamAthlete_TeamVersion", Storage="_Inti_TeamVersion", ThisKey="TeamVersionGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_TeamVersion Inti_TeamVersion
		{
			get
			{
				return this._Inti_TeamVersion.Entity;
			}
			set
			{
				Inti_TeamVersion previousValue = this._Inti_TeamVersion.Entity;
				if (((previousValue != value) 
							|| (this._Inti_TeamVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_TeamVersion.Entity = null;
						previousValue.Inti_TeamAthlete.Remove(this);
					}
					this._Inti_TeamVersion.Entity = value;
					if ((value != null))
					{
						value.Inti_TeamAthlete.Add(this);
						this._TeamVersionGUID = value.GUID;
					}
					else
					{
						this._TeamVersionGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_TeamVersion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.inti_TeamTransfer")]
	public partial class Inti_TeamTransfer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _TeamGUID;
		
		private System.Nullable<System.DateTime> _TransferDate;
		
		private System.Guid _AthleteOutGUID;
		
		private System.Guid _AthleteInGUID;
		
		private EntityRef<Inti_AthleteClub> _Inti_AthleteClub;
		
		private EntityRef<Inti_AthleteClub> _AthleteOutGU;
		
		private EntityRef<Inti_Team> _Inti_Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnTeamGUIDChanging(System.Guid value);
    partial void OnTeamGUIDChanged();
    partial void OnTransferDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTransferDateChanged();
    partial void OnAthleteOutGUIDChanging(System.Guid value);
    partial void OnAthleteOutGUIDChanged();
    partial void OnAthleteInGUIDChanging(System.Guid value);
    partial void OnAthleteInGUIDChanged();
    #endregion
		
		public Inti_TeamTransfer()
		{
			this._Inti_AthleteClub = default(EntityRef<Inti_AthleteClub>);
			this._AthleteOutGU = default(EntityRef<Inti_AthleteClub>);
			this._Inti_Team = default(EntityRef<Inti_Team>);
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeamGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TeamGUID
		{
			get
			{
				return this._TeamGUID;
			}
			set
			{
				if ((this._TeamGUID != value))
				{
					if (this._Inti_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamGUIDChanging(value);
					this.SendPropertyChanging();
					this._TeamGUID = value;
					this.SendPropertyChanged("TeamGUID");
					this.OnTeamGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TransferDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TransferDate
		{
			get
			{
				return this._TransferDate;
			}
			set
			{
				if ((this._TransferDate != value))
				{
					this.OnTransferDateChanging(value);
					this.SendPropertyChanging();
					this._TransferDate = value;
					this.SendPropertyChanged("TransferDate");
					this.OnTransferDateChanged();
				}
			}
		}
		
		[Column(Storage="_AthleteOutGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AthleteOutGUID
		{
			get
			{
				return this._AthleteOutGUID;
			}
			set
			{
				if ((this._AthleteOutGUID != value))
				{
					if (this._AthleteOutGU.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthleteOutGUIDChanging(value);
					this.SendPropertyChanging();
					this._AthleteOutGUID = value;
					this.SendPropertyChanged("AthleteOutGUID");
					this.OnAthleteOutGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_AthleteInGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AthleteInGUID
		{
			get
			{
				return this._AthleteInGUID;
			}
			set
			{
				if ((this._AthleteInGUID != value))
				{
					if (this._Inti_AthleteClub.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthleteInGUIDChanging(value);
					this.SendPropertyChanging();
					this._AthleteInGUID = value;
					this.SendPropertyChanged("AthleteInGUID");
					this.OnAthleteInGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_inti_TeamTransfer_AthleteIn", Storage="_Inti_AthleteClub", ThisKey="AthleteInGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_AthleteClub Inti_AthleteClub
		{
			get
			{
				return this._Inti_AthleteClub.Entity;
			}
			set
			{
				Inti_AthleteClub previousValue = this._Inti_AthleteClub.Entity;
				if (((previousValue != value) 
							|| (this._Inti_AthleteClub.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_AthleteClub.Entity = null;
						previousValue.Inti_TeamTransfer.Remove(this);
					}
					this._Inti_AthleteClub.Entity = value;
					if ((value != null))
					{
						value.Inti_TeamTransfer.Add(this);
						this._AthleteInGUID = value.GUID;
					}
					else
					{
						this._AthleteInGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_AthleteClub");
				}
			}
		}
		
		[Association(Name="FK_inti_TeamTransfer_AthleteOut", Storage="_AthleteOutGU", ThisKey="AthleteOutGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_AthleteClub AthleteOutGU
		{
			get
			{
				return this._AthleteOutGU.Entity;
			}
			set
			{
				Inti_AthleteClub previousValue = this._AthleteOutGU.Entity;
				if (((previousValue != value) 
							|| (this._AthleteOutGU.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AthleteOutGU.Entity = null;
						previousValue.Inti_TeamTransfer_AthleteOut.Remove(this);
					}
					this._AthleteOutGU.Entity = value;
					if ((value != null))
					{
						value.Inti_TeamTransfer_AthleteOut.Add(this);
						this._AthleteOutGUID = value.GUID;
					}
					else
					{
						this._AthleteOutGUID = default(System.Guid);
					}
					this.SendPropertyChanged("AthleteOutGU");
				}
			}
		}
		
		[Association(Name="FK_inti_TeamTransfer_Team", Storage="_Inti_Team", ThisKey="TeamGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Team Inti_Team
		{
			get
			{
				return this._Inti_Team.Entity;
			}
			set
			{
				Inti_Team previousValue = this._Inti_Team.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Team.Entity = null;
						previousValue.Inti_TeamTransfer.Remove(this);
					}
					this._Inti_Team.Entity = value;
					if ((value != null))
					{
						value.Inti_TeamTransfer.Add(this);
						this._TeamGUID = value.GUID;
					}
					else
					{
						this._TeamGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.inti_TeamVersion")]
	public partial class Inti_TeamVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _TeamGUID;
		
		private int _Version;
		
		private System.Nullable<System.DateTime> _ValidFrom;
		
		private System.Nullable<System.DateTime> _ValidTo;
		
		private EntitySet<Inti_TeamAthlete> _Inti_TeamAthlete;
		
		private EntityRef<Inti_Team> _Inti_Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnTeamGUIDChanging(System.Guid value);
    partial void OnTeamGUIDChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnValidFromChanging(System.Nullable<System.DateTime> value);
    partial void OnValidFromChanged();
    partial void OnValidToChanging(System.Nullable<System.DateTime> value);
    partial void OnValidToChanged();
    #endregion
		
		public Inti_TeamVersion()
		{
			this._Inti_TeamAthlete = new EntitySet<Inti_TeamAthlete>(new Action<Inti_TeamAthlete>(this.attach_Inti_TeamAthlete), new Action<Inti_TeamAthlete>(this.detach_Inti_TeamAthlete));
			this._Inti_Team = default(EntityRef<Inti_Team>);
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeamGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TeamGUID
		{
			get
			{
				return this._TeamGUID;
			}
			set
			{
				if ((this._TeamGUID != value))
				{
					if (this._Inti_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamGUIDChanging(value);
					this.SendPropertyChanging();
					this._TeamGUID = value;
					this.SendPropertyChanged("TeamGUID");
					this.OnTeamGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_ValidFrom", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ValidFrom
		{
			get
			{
				return this._ValidFrom;
			}
			set
			{
				if ((this._ValidFrom != value))
				{
					this.OnValidFromChanging(value);
					this.SendPropertyChanging();
					this._ValidFrom = value;
					this.SendPropertyChanged("ValidFrom");
					this.OnValidFromChanged();
				}
			}
		}
		
		[Column(Storage="_ValidTo", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ValidTo
		{
			get
			{
				return this._ValidTo;
			}
			set
			{
				if ((this._ValidTo != value))
				{
					this.OnValidToChanging(value);
					this.SendPropertyChanging();
					this._ValidTo = value;
					this.SendPropertyChanged("ValidTo");
					this.OnValidToChanged();
				}
			}
		}
		
		[Association(Name="FK_inti_TeamAthlete_TeamVersion", Storage="_Inti_TeamAthlete", ThisKey="GUID", OtherKey="TeamVersionGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_TeamAthlete> Inti_TeamAthlete
		{
			get
			{
				return this._Inti_TeamAthlete;
			}
			set
			{
				this._Inti_TeamAthlete.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_TeamVersion", Storage="_Inti_Team", ThisKey="TeamGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Team Inti_Team
		{
			get
			{
				return this._Inti_Team.Entity;
			}
			set
			{
				Inti_Team previousValue = this._Inti_Team.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Team.Entity = null;
						previousValue.Inti_TeamVersion.Remove(this);
					}
					this._Inti_Team.Entity = value;
					if ((value != null))
					{
						value.Inti_TeamVersion.Add(this);
						this._TeamGUID = value.GUID;
					}
					else
					{
						this._TeamGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inti_TeamAthlete(Inti_TeamAthlete entity)
		{
			this.SendPropertyChanging();
			entity.Inti_TeamVersion = this;
		}
		
		private void detach_Inti_TeamAthlete(Inti_TeamAthlete entity)
		{
			this.SendPropertyChanging();
			entity.Inti_TeamVersion = null;
		}
	}
	
	[Table(Name="dbo.inti_TeamPointEvents")]
	public partial class Inti_TeamPointEvents : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MatchPointEventGUID;
		
		private System.Guid _TeamGUID;
		
		private EntityRef<Inti_MatchPointEvent> _Inti_MatchPointEvent;
		
		private EntityRef<Inti_Team> _Inti_Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchPointEventGUIDChanging(System.Guid value);
    partial void OnMatchPointEventGUIDChanged();
    partial void OnTeamGUIDChanging(System.Guid value);
    partial void OnTeamGUIDChanged();
    #endregion
		
		public Inti_TeamPointEvents()
		{
			this._Inti_MatchPointEvent = default(EntityRef<Inti_MatchPointEvent>);
			this._Inti_Team = default(EntityRef<Inti_Team>);
			OnCreated();
		}
		
		[Column(Storage="_MatchPointEventGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MatchPointEventGUID
		{
			get
			{
				return this._MatchPointEventGUID;
			}
			set
			{
				if ((this._MatchPointEventGUID != value))
				{
					if (this._Inti_MatchPointEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchPointEventGUIDChanging(value);
					this.SendPropertyChanging();
					this._MatchPointEventGUID = value;
					this.SendPropertyChanged("MatchPointEventGUID");
					this.OnMatchPointEventGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeamGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TeamGUID
		{
			get
			{
				return this._TeamGUID;
			}
			set
			{
				if ((this._TeamGUID != value))
				{
					if (this._Inti_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamGUIDChanging(value);
					this.SendPropertyChanging();
					this._TeamGUID = value;
					this.SendPropertyChanged("TeamGUID");
					this.OnTeamGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_inti_TeamPointEvents_MatchPointEvent", Storage="_Inti_MatchPointEvent", ThisKey="MatchPointEventGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_MatchPointEvent Inti_MatchPointEvent
		{
			get
			{
				return this._Inti_MatchPointEvent.Entity;
			}
			set
			{
				Inti_MatchPointEvent previousValue = this._Inti_MatchPointEvent.Entity;
				if (((previousValue != value) 
							|| (this._Inti_MatchPointEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_MatchPointEvent.Entity = null;
						previousValue.Inti_TeamPointEvents.Remove(this);
					}
					this._Inti_MatchPointEvent.Entity = value;
					if ((value != null))
					{
						value.Inti_TeamPointEvents.Add(this);
						this._MatchPointEventGUID = value.GUID;
					}
					else
					{
						this._MatchPointEventGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_MatchPointEvent");
				}
			}
		}
		
		[Association(Name="FK_inti_TeamPointEvents_Team", Storage="_Inti_Team", ThisKey="TeamGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Team Inti_Team
		{
			get
			{
				return this._Inti_Team.Entity;
			}
			set
			{
				Inti_Team previousValue = this._Inti_Team.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Team.Entity = null;
						previousValue.Inti_TeamPointEvents.Remove(this);
					}
					this._Inti_Team.Entity = value;
					if ((value != null))
					{
						value.Inti_TeamPointEvents.Add(this);
						this._TeamGUID = value.GUID;
					}
					else
					{
						this._TeamGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.inti_Tournament")]
	public partial class Inti_Tournament : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _PublicateDate;
		
		private System.DateTime _StartRegistration;
		
		private System.DateTime _EndRegistration;
		
		private int _NmbrOfDays;
		
		private int _NmbrOfClubs;
		
		private int _NmbrOfTransfers;
		
		private System.Nullable<int> _Budget;
		
		private bool _IncludeManager;
		
		private EntitySet<Ext_PrivateTournament> _Ext_PrivateTournament;
		
		private EntitySet<Ext_ForumCategory> _Ext_ForumCategory;
		
		private EntitySet<Inti_Match> _Inti_Match;
		
		private EntitySet<Inti_PointEvent> _Inti_PointEvent;
		
		private EntitySet<Inti_Team> _Inti_Team;
		
		private EntitySet<Inti_TransferPeriod> _Inti_TransferPeriod;
		
		private EntitySet<Inti_TournamentRule> _Inti_TournamentRule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPublicateDateChanging(System.DateTime value);
    partial void OnPublicateDateChanged();
    partial void OnStartRegistrationChanging(System.DateTime value);
    partial void OnStartRegistrationChanged();
    partial void OnEndRegistrationChanging(System.DateTime value);
    partial void OnEndRegistrationChanged();
    partial void OnNmbrOfDaysChanging(int value);
    partial void OnNmbrOfDaysChanged();
    partial void OnNmbrOfClubsChanging(int value);
    partial void OnNmbrOfClubsChanged();
    partial void OnNmbrOfTransfersChanging(int value);
    partial void OnNmbrOfTransfersChanged();
    partial void OnBudgetChanging(System.Nullable<int> value);
    partial void OnBudgetChanged();
    partial void OnIncludeManagerChanging(bool value);
    partial void OnIncludeManagerChanged();
    #endregion
		
		public Inti_Tournament()
		{
			this._Ext_PrivateTournament = new EntitySet<Ext_PrivateTournament>(new Action<Ext_PrivateTournament>(this.attach_Ext_PrivateTournament), new Action<Ext_PrivateTournament>(this.detach_Ext_PrivateTournament));
			this._Ext_ForumCategory = new EntitySet<Ext_ForumCategory>(new Action<Ext_ForumCategory>(this.attach_Ext_ForumCategory), new Action<Ext_ForumCategory>(this.detach_Ext_ForumCategory));
			this._Inti_Match = new EntitySet<Inti_Match>(new Action<Inti_Match>(this.attach_Inti_Match), new Action<Inti_Match>(this.detach_Inti_Match));
			this._Inti_PointEvent = new EntitySet<Inti_PointEvent>(new Action<Inti_PointEvent>(this.attach_Inti_PointEvent), new Action<Inti_PointEvent>(this.detach_Inti_PointEvent));
			this._Inti_Team = new EntitySet<Inti_Team>(new Action<Inti_Team>(this.attach_Inti_Team), new Action<Inti_Team>(this.detach_Inti_Team));
			this._Inti_TransferPeriod = new EntitySet<Inti_TransferPeriod>(new Action<Inti_TransferPeriod>(this.attach_Inti_TransferPeriod), new Action<Inti_TransferPeriod>(this.detach_Inti_TransferPeriod));
			this._Inti_TournamentRule = new EntitySet<Inti_TournamentRule>(new Action<Inti_TournamentRule>(this.attach_Inti_TournamentRule), new Action<Inti_TournamentRule>(this.detach_Inti_TournamentRule));
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_PublicateDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime PublicateDate
		{
			get
			{
				return this._PublicateDate;
			}
			set
			{
				if ((this._PublicateDate != value))
				{
					this.OnPublicateDateChanging(value);
					this.SendPropertyChanging();
					this._PublicateDate = value;
					this.SendPropertyChanged("PublicateDate");
					this.OnPublicateDateChanged();
				}
			}
		}
		
		[Column(Storage="_StartRegistration", DbType="SmallDateTime NOT NULL")]
		public System.DateTime StartRegistration
		{
			get
			{
				return this._StartRegistration;
			}
			set
			{
				if ((this._StartRegistration != value))
				{
					this.OnStartRegistrationChanging(value);
					this.SendPropertyChanging();
					this._StartRegistration = value;
					this.SendPropertyChanged("StartRegistration");
					this.OnStartRegistrationChanged();
				}
			}
		}
		
		[Column(Storage="_EndRegistration", DbType="SmallDateTime NOT NULL")]
		public System.DateTime EndRegistration
		{
			get
			{
				return this._EndRegistration;
			}
			set
			{
				if ((this._EndRegistration != value))
				{
					this.OnEndRegistrationChanging(value);
					this.SendPropertyChanging();
					this._EndRegistration = value;
					this.SendPropertyChanged("EndRegistration");
					this.OnEndRegistrationChanged();
				}
			}
		}
		
		[Column(Storage="_NmbrOfDays", DbType="Int NOT NULL")]
		public int NmbrOfDays
		{
			get
			{
				return this._NmbrOfDays;
			}
			set
			{
				if ((this._NmbrOfDays != value))
				{
					this.OnNmbrOfDaysChanging(value);
					this.SendPropertyChanging();
					this._NmbrOfDays = value;
					this.SendPropertyChanged("NmbrOfDays");
					this.OnNmbrOfDaysChanged();
				}
			}
		}
		
		[Column(Storage="_NmbrOfClubs", DbType="Int NOT NULL")]
		public int NmbrOfClubs
		{
			get
			{
				return this._NmbrOfClubs;
			}
			set
			{
				if ((this._NmbrOfClubs != value))
				{
					this.OnNmbrOfClubsChanging(value);
					this.SendPropertyChanging();
					this._NmbrOfClubs = value;
					this.SendPropertyChanged("NmbrOfClubs");
					this.OnNmbrOfClubsChanged();
				}
			}
		}
		
		[Column(Storage="_NmbrOfTransfers", DbType="Int NOT NULL")]
		public int NmbrOfTransfers
		{
			get
			{
				return this._NmbrOfTransfers;
			}
			set
			{
				if ((this._NmbrOfTransfers != value))
				{
					this.OnNmbrOfTransfersChanging(value);
					this.SendPropertyChanging();
					this._NmbrOfTransfers = value;
					this.SendPropertyChanged("NmbrOfTransfers");
					this.OnNmbrOfTransfersChanged();
				}
			}
		}
		
		[Column(Storage="_Budget", DbType="Int")]
		public System.Nullable<int> Budget
		{
			get
			{
				return this._Budget;
			}
			set
			{
				if ((this._Budget != value))
				{
					this.OnBudgetChanging(value);
					this.SendPropertyChanging();
					this._Budget = value;
					this.SendPropertyChanged("Budget");
					this.OnBudgetChanged();
				}
			}
		}
		
		[Column(Storage="_IncludeManager", DbType="Bit")]
		public bool IncludeManager
		{
			get
			{
				return this._IncludeManager;
			}
			set
			{
				if ((this._IncludeManager != value))
				{
					this.OnIncludeManagerChanging(value);
					this.SendPropertyChanging();
					this._IncludeManager = value;
					this.SendPropertyChanged("IncludeManager");
					this.OnIncludeManagerChanged();
				}
			}
		}
		
		[Association(Name="ext_PrivateTournament_Tournament", Storage="_Ext_PrivateTournament", ThisKey="GUID", OtherKey="TournamentGUID", DeleteRule="NO ACTION")]
		public EntitySet<Ext_PrivateTournament> Ext_PrivateTournament
		{
			get
			{
				return this._Ext_PrivateTournament;
			}
			set
			{
				this._Ext_PrivateTournament.Assign(value);
			}
		}
		
		[Association(Name="FK_ext_ForumCategory_Tournament", Storage="_Ext_ForumCategory", ThisKey="GUID", OtherKey="TournamentGUID", DeleteRule="NO ACTION")]
		public EntitySet<Ext_ForumCategory> Ext_ForumCategory
		{
			get
			{
				return this._Ext_ForumCategory;
			}
			set
			{
				this._Ext_ForumCategory.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_Match_Tournament", Storage="_Inti_Match", ThisKey="GUID", OtherKey="TournamentGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_Match> Inti_Match
		{
			get
			{
				return this._Inti_Match;
			}
			set
			{
				this._Inti_Match.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_PointEvent_Tournament", Storage="_Inti_PointEvent", ThisKey="GUID", OtherKey="TournamentGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_PointEvent> Inti_PointEvent
		{
			get
			{
				return this._Inti_PointEvent;
			}
			set
			{
				this._Inti_PointEvent.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_Team_Tournament", Storage="_Inti_Team", ThisKey="GUID", OtherKey="TournamentGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_Team> Inti_Team
		{
			get
			{
				return this._Inti_Team;
			}
			set
			{
				this._Inti_Team.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_TransferPeriod_Tournament", Storage="_Inti_TransferPeriod", ThisKey="GUID", OtherKey="TournamentGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_TransferPeriod> Inti_TransferPeriod
		{
			get
			{
				return this._Inti_TransferPeriod;
			}
			set
			{
				this._Inti_TransferPeriod.Assign(value);
			}
		}
		
		[Association(Name="FK_intiTournamentRule", Storage="_Inti_TournamentRule", ThisKey="GUID", OtherKey="TournamentGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_TournamentRule> Inti_TournamentRule
		{
			get
			{
				return this._Inti_TournamentRule;
			}
			set
			{
				this._Inti_TournamentRule.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ext_PrivateTournament(Ext_PrivateTournament entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Tournament = this;
		}
		
		private void detach_Ext_PrivateTournament(Ext_PrivateTournament entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Tournament = null;
		}
		
		private void attach_Ext_ForumCategory(Ext_ForumCategory entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Tournament = this;
		}
		
		private void detach_Ext_ForumCategory(Ext_ForumCategory entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Tournament = null;
		}
		
		private void attach_Inti_Match(Inti_Match entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Tournament = this;
		}
		
		private void detach_Inti_Match(Inti_Match entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Tournament = null;
		}
		
		private void attach_Inti_PointEvent(Inti_PointEvent entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Tournament = this;
		}
		
		private void detach_Inti_PointEvent(Inti_PointEvent entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Tournament = null;
		}
		
		private void attach_Inti_Team(Inti_Team entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Tournament = this;
		}
		
		private void detach_Inti_Team(Inti_Team entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Tournament = null;
		}
		
		private void attach_Inti_TransferPeriod(Inti_TransferPeriod entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Tournament = this;
		}
		
		private void detach_Inti_TransferPeriod(Inti_TransferPeriod entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Tournament = null;
		}
		
		private void attach_Inti_TournamentRule(Inti_TournamentRule entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Tournament = this;
		}
		
		private void detach_Inti_TournamentRule(Inti_TournamentRule entity)
		{
			this.SendPropertyChanging();
			entity.Inti_Tournament = null;
		}
	}
	
	[Table(Name="dbo.inti_TournamentRule")]
	public partial class Inti_TournamentRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TournamentGUID;
		
		private int _SortOrder;
		
		private string _Header;
		
		private string _Body;
		
		private EntityRef<Inti_Tournament> _Inti_Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTournamentGUIDChanging(System.Guid value);
    partial void OnTournamentGUIDChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    #endregion
		
		public Inti_TournamentRule()
		{
			this._Inti_Tournament = default(EntityRef<Inti_Tournament>);
			OnCreated();
		}
		
		[Column(Storage="_TournamentGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TournamentGUID
		{
			get
			{
				return this._TournamentGUID;
			}
			set
			{
				if ((this._TournamentGUID != value))
				{
					if (this._Inti_Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentGUIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentGUID = value;
					this.SendPropertyChanged("TournamentGUID");
					this.OnTournamentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_SortOrder", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Header", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Association(Name="FK_intiTournamentRule", Storage="_Inti_Tournament", ThisKey="TournamentGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Tournament Inti_Tournament
		{
			get
			{
				return this._Inti_Tournament.Entity;
			}
			set
			{
				Inti_Tournament previousValue = this._Inti_Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Tournament.Entity = null;
						previousValue.Inti_TournamentRule.Remove(this);
					}
					this._Inti_Tournament.Entity = value;
					if ((value != null))
					{
						value.Inti_TournamentRule.Add(this);
						this._TournamentGUID = value.GUID;
					}
					else
					{
						this._TournamentGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.inti_TransferPeriod")]
	public partial class Inti_TransferPeriod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _TournamentGUID;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private EntityRef<Inti_Tournament> _Inti_Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnTournamentGUIDChanging(System.Guid value);
    partial void OnTournamentGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    #endregion
		
		public Inti_TransferPeriod()
		{
			this._Inti_Tournament = default(EntityRef<Inti_Tournament>);
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TournamentGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TournamentGUID
		{
			get
			{
				return this._TournamentGUID;
			}
			set
			{
				if ((this._TournamentGUID != value))
				{
					if (this._Inti_Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentGUIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentGUID = value;
					this.SendPropertyChanged("TournamentGUID");
					this.OnTournamentGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Association(Name="FK_inti_TransferPeriod_Tournament", Storage="_Inti_Tournament", ThisKey="TournamentGUID", OtherKey="GUID", IsForeignKey=true)]
		public Inti_Tournament Inti_Tournament
		{
			get
			{
				return this._Inti_Tournament.Entity;
			}
			set
			{
				Inti_Tournament previousValue = this._Inti_Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Inti_Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inti_Tournament.Entity = null;
						previousValue.Inti_TransferPeriod.Remove(this);
					}
					this._Inti_Tournament.Entity = value;
					if ((value != null))
					{
						value.Inti_TransferPeriod.Add(this);
						this._TournamentGUID = value.GUID;
					}
					else
					{
						this._TournamentGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Inti_Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sys_Parameter")]
	public partial class Sys_Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _Name;
		
		private string _Description;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Sys_Parameter()
		{
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(2048)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sys_Permission")]
	public partial class Sys_Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Sys_UserPermission> _Sys_UserPermission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Sys_Permission()
		{
			this._Sys_UserPermission = new EntitySet<Sys_UserPermission>(new Action<Sys_UserPermission>(this.attach_Sys_UserPermission), new Action<Sys_UserPermission>(this.detach_Sys_UserPermission));
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="FK_UserPermission_Permission", Storage="_Sys_UserPermission", ThisKey="GUID", OtherKey="PermissionGUID", DeleteRule="NO ACTION")]
		public EntitySet<Sys_UserPermission> Sys_UserPermission
		{
			get
			{
				return this._Sys_UserPermission;
			}
			set
			{
				this._Sys_UserPermission.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sys_UserPermission(Sys_UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.Sys_Permission = this;
		}
		
		private void detach_Sys_UserPermission(Sys_UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.Sys_Permission = null;
		}
	}
	
	[Table(Name="dbo.sys_User")]
	public partial class Sys_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _UserName;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<Ext_PrivateTournament> _Ext_PrivateTournament;
		
		private EntitySet<Ext_Forum> _Ext_Forum;
		
		private EntitySet<Ext_Message> _Ext_Message;
		
		private EntitySet<Ext_MessageRecipient> _Ext_MessageRecipient;
		
		private EntitySet<Inti_Team> _Inti_Team;
		
		private EntitySet<Sys_UserPermission> _Sys_UserPermission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public Sys_User()
		{
			this._Ext_PrivateTournament = new EntitySet<Ext_PrivateTournament>(new Action<Ext_PrivateTournament>(this.attach_Ext_PrivateTournament), new Action<Ext_PrivateTournament>(this.detach_Ext_PrivateTournament));
			this._Ext_Forum = new EntitySet<Ext_Forum>(new Action<Ext_Forum>(this.attach_Ext_Forum), new Action<Ext_Forum>(this.detach_Ext_Forum));
			this._Ext_Message = new EntitySet<Ext_Message>(new Action<Ext_Message>(this.attach_Ext_Message), new Action<Ext_Message>(this.detach_Ext_Message));
			this._Ext_MessageRecipient = new EntitySet<Ext_MessageRecipient>(new Action<Ext_MessageRecipient>(this.attach_Ext_MessageRecipient), new Action<Ext_MessageRecipient>(this.detach_Ext_MessageRecipient));
			this._Inti_Team = new EntitySet<Inti_Team>(new Action<Inti_Team>(this.attach_Inti_Team), new Action<Inti_Team>(this.detach_Inti_Team));
			this._Sys_UserPermission = new EntitySet<Sys_UserPermission>(new Action<Sys_UserPermission>(this.attach_Sys_UserPermission), new Action<Sys_UserPermission>(this.detach_Sys_UserPermission));
			OnCreated();
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(100)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Association(Name="ext_PrivateTournament_User", Storage="_Ext_PrivateTournament", ThisKey="GUID", OtherKey="UserGUID", DeleteRule="NO ACTION")]
		public EntitySet<Ext_PrivateTournament> Ext_PrivateTournament
		{
			get
			{
				return this._Ext_PrivateTournament;
			}
			set
			{
				this._Ext_PrivateTournament.Assign(value);
			}
		}
		
		[Association(Name="FK_ext_Forum_User", Storage="_Ext_Forum", ThisKey="GUID", OtherKey="UserGUID", DeleteRule="NO ACTION")]
		public EntitySet<Ext_Forum> Ext_Forum
		{
			get
			{
				return this._Ext_Forum;
			}
			set
			{
				this._Ext_Forum.Assign(value);
			}
		}
		
		[Association(Name="FK_ext_Message_User", Storage="_Ext_Message", ThisKey="GUID", OtherKey="FromUserGUID", DeleteRule="NO ACTION")]
		public EntitySet<Ext_Message> Ext_Message
		{
			get
			{
				return this._Ext_Message;
			}
			set
			{
				this._Ext_Message.Assign(value);
			}
		}
		
		[Association(Name="FK_ext_MessageRecipient_User", Storage="_Ext_MessageRecipient", ThisKey="GUID", OtherKey="RecipientUserGUID", DeleteRule="NO ACTION")]
		public EntitySet<Ext_MessageRecipient> Ext_MessageRecipient
		{
			get
			{
				return this._Ext_MessageRecipient;
			}
			set
			{
				this._Ext_MessageRecipient.Assign(value);
			}
		}
		
		[Association(Name="FK_inti_Team_User", Storage="_Inti_Team", ThisKey="GUID", OtherKey="UserGUID", DeleteRule="NO ACTION")]
		public EntitySet<Inti_Team> Inti_Team
		{
			get
			{
				return this._Inti_Team;
			}
			set
			{
				this._Inti_Team.Assign(value);
			}
		}
		
		[Association(Name="FK_UserPermission_User", Storage="_Sys_UserPermission", ThisKey="GUID", OtherKey="UserGUID", DeleteRule="NO ACTION")]
		public EntitySet<Sys_UserPermission> Sys_UserPermission
		{
			get
			{
				return this._Sys_UserPermission;
			}
			set
			{
				this._Sys_UserPermission.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ext_PrivateTournament(Ext_PrivateTournament entity)
		{
			this.SendPropertyChanging();
			entity.Sys_User = this;
		}
		
		private void detach_Ext_PrivateTournament(Ext_PrivateTournament entity)
		{
			this.SendPropertyChanging();
			entity.Sys_User = null;
		}
		
		private void attach_Ext_Forum(Ext_Forum entity)
		{
			this.SendPropertyChanging();
			entity.Sys_User = this;
		}
		
		private void detach_Ext_Forum(Ext_Forum entity)
		{
			this.SendPropertyChanging();
			entity.Sys_User = null;
		}
		
		private void attach_Ext_Message(Ext_Message entity)
		{
			this.SendPropertyChanging();
			entity.Sys_User = this;
		}
		
		private void detach_Ext_Message(Ext_Message entity)
		{
			this.SendPropertyChanging();
			entity.Sys_User = null;
		}
		
		private void attach_Ext_MessageRecipient(Ext_MessageRecipient entity)
		{
			this.SendPropertyChanging();
			entity.Sys_User = this;
		}
		
		private void detach_Ext_MessageRecipient(Ext_MessageRecipient entity)
		{
			this.SendPropertyChanging();
			entity.Sys_User = null;
		}
		
		private void attach_Inti_Team(Inti_Team entity)
		{
			this.SendPropertyChanging();
			entity.Sys_User = this;
		}
		
		private void detach_Inti_Team(Inti_Team entity)
		{
			this.SendPropertyChanging();
			entity.Sys_User = null;
		}
		
		private void attach_Sys_UserPermission(Sys_UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.Sys_User = this;
		}
		
		private void detach_Sys_UserPermission(Sys_UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.Sys_User = null;
		}
	}
	
	[Table(Name="dbo.sys_UserPermission")]
	public partial class Sys_UserPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserGUID;
		
		private System.Guid _PermissionGUID;
		
		private EntityRef<Sys_Permission> _Sys_Permission;
		
		private EntityRef<Sys_User> _Sys_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserGUIDChanging(System.Guid value);
    partial void OnUserGUIDChanged();
    partial void OnPermissionGUIDChanging(System.Guid value);
    partial void OnPermissionGUIDChanged();
    #endregion
		
		public Sys_UserPermission()
		{
			this._Sys_Permission = default(EntityRef<Sys_Permission>);
			this._Sys_User = default(EntityRef<Sys_User>);
			OnCreated();
		}
		
		[Column(Storage="_UserGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserGUID
		{
			get
			{
				return this._UserGUID;
			}
			set
			{
				if ((this._UserGUID != value))
				{
					if (this._Sys_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserGUIDChanging(value);
					this.SendPropertyChanging();
					this._UserGUID = value;
					this.SendPropertyChanged("UserGUID");
					this.OnUserGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_PermissionGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PermissionGUID
		{
			get
			{
				return this._PermissionGUID;
			}
			set
			{
				if ((this._PermissionGUID != value))
				{
					if (this._Sys_Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionGUIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionGUID = value;
					this.SendPropertyChanged("PermissionGUID");
					this.OnPermissionGUIDChanged();
				}
			}
		}
		
		[Association(Name="FK_UserPermission_Permission", Storage="_Sys_Permission", ThisKey="PermissionGUID", OtherKey="GUID", IsForeignKey=true)]
		public Sys_Permission Sys_Permission
		{
			get
			{
				return this._Sys_Permission.Entity;
			}
			set
			{
				Sys_Permission previousValue = this._Sys_Permission.Entity;
				if (((previousValue != value) 
							|| (this._Sys_Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sys_Permission.Entity = null;
						previousValue.Sys_UserPermission.Remove(this);
					}
					this._Sys_Permission.Entity = value;
					if ((value != null))
					{
						value.Sys_UserPermission.Add(this);
						this._PermissionGUID = value.GUID;
					}
					else
					{
						this._PermissionGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Sys_Permission");
				}
			}
		}
		
		[Association(Name="FK_UserPermission_User", Storage="_Sys_User", ThisKey="UserGUID", OtherKey="GUID", IsForeignKey=true)]
		public Sys_User Sys_User
		{
			get
			{
				return this._Sys_User.Entity;
			}
			set
			{
				Sys_User previousValue = this._Sys_User.Entity;
				if (((previousValue != value) 
							|| (this._Sys_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sys_User.Entity = null;
						previousValue.Sys_UserPermission.Remove(this);
					}
					this._Sys_User.Entity = value;
					if ((value != null))
					{
						value.Sys_UserPermission.Add(this);
						this._UserGUID = value.GUID;
					}
					else
					{
						this._UserGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Sys_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
